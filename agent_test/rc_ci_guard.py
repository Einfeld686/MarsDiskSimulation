#!/usr/bin/env python3
"""CI guard that fails when documentation coverage drops below a threshold."""

from __future__ import annotations

import argparse
import json
from pathlib import Path
from typing import Sequence


DEFAULT_COVERAGE_PATH = Path(__file__).resolve().parent / "reports" / "coverage.json"


def load_coverage(path: Path) -> dict:
    """Load coverage metrics from *path*."""
    return json.loads(path.read_text(encoding="utf-8"))


def build_argument_parser() -> argparse.ArgumentParser:
    """Create the CLI parser."""
    parser = argparse.ArgumentParser(
        description="Exit non-zero when documentation coverage falls below --fail-under."
    )
    parser.add_argument(
        "--coverage",
        type=Path,
        default=DEFAULT_COVERAGE_PATH,
        help="Path to coverage.json generated by rc_compare.py.",
    )
    parser.add_argument(
        "--fail-under",
        type=float,
        required=True,
        help="Minimum acceptable function reference rate (0-1).",
    )
    return parser


def main(argv: Sequence[str] | None = None) -> int:
    """Entry point for the CLI."""
    parser = build_argument_parser()
    args = parser.parse_args(argv)

    coverage_path = (
        args.coverage
        if args.coverage.is_absolute()
        else (Path(__file__).resolve().parent / args.coverage)
    ).resolve()
    metrics = load_coverage(coverage_path)

    rate = float(metrics.get("function_reference_rate", 0.0))
    threshold = args.fail_under
    referenced = metrics.get("function_referenced", 0)
    total = metrics.get("function_total", 0)
    unreferenced = metrics.get("unreferenced", [])

    print(
        f"[rc_ci_guard] rate={rate:.3f} "
        f"({referenced}/{total}) threshold={threshold:.3f}"
    )
    if rate >= threshold:
        print("[rc_ci_guard] PASS")
        return 0

    top_missing = unreferenced[:5]
    print("[rc_ci_guard] FAIL: coverage below threshold")
    for entry in top_missing:
        print(
            f"  - {entry['file']}:{entry['lineno']} "
            f"{entry['name']} (lines {entry['lineno']}â€“{entry['end_lineno']})"
        )
    return 2


if __name__ == "__main__":
    raise SystemExit(main())
