[
  {
    "file_path": "agent_test/checks_psat_auto_01/make_table.py",
    "line_no": 18,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/checks_psat_auto_01/scan_hkl.py",
    "line_no": 20,
    "symbol": "CaseConfig",
    "signature": "class CaseConfig",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/checks_psat_auto_01/scan_hkl.py",
    "line_no": 27,
    "symbol": "load_sub_params",
    "signature": "load_sub_params(config_path: Path) -> SublimationParams",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/checks_psat_auto_01/scan_hkl.py",
    "line_no": 42,
    "symbol": "scan_case",
    "signature": "scan_case(case: CaseConfig, T_grid: Iterable[float]) -> Tuple[List[Dict[str, float]], Dict[str, object]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/checks_psat_auto_01/scan_hkl.py",
    "line_no": 74,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 10,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 11,
    "symbol": "DEFAULT_COVERAGE_PATH",
    "signature": "DEFAULT_COVERAGE_PATH = REPO_ROOT / 'analysis' / 'coverage.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 12,
    "symbol": "DEFAULT_REFS_PATH",
    "signature": "DEFAULT_REFS_PATH = REPO_ROOT / 'analysis' / 'doc_refs.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 13,
    "symbol": "DEFAULT_INVENTORY_PATH",
    "signature": "DEFAULT_INVENTORY_PATH = REPO_ROOT / 'analysis' / 'inventory.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 17,
    "symbol": "CoverageSnapshot",
    "signature": "class CoverageSnapshot",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 28,
    "symbol": "load_coverage",
    "signature": "load_coverage(path: Path) -> CoverageSnapshot",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 61,
    "symbol": "resolve_path",
    "signature": "resolve_path(candidate: Path) -> Path",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 67,
    "symbol": "build_parser",
    "signature": "build_parser() -> argparse.ArgumentParser",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 109,
    "symbol": "iter_missing",
    "signature": "iter_missing(snapshot: CoverageSnapshot) -> Iterable[str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 122,
    "symbol": "_load_inventory_records",
    "signature": "_load_inventory_records(path: Path) -> List[Tuple[str, str, int, int]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 138,
    "symbol": "find_invalid_anchors",
    "signature": "find_invalid_anchors(refs_path: Path, inventory_path: Path) -> List[str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/ci_guard_analysis.py",
    "line_no": 176,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 35,
    "symbol": "CURRENT_FILE",
    "signature": "CURRENT_FILE = Path(__file__).resolve()",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 36,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = CURRENT_FILE.parents[2]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 42,
    "symbol": "CONFIG_DIR",
    "signature": "CONFIG_DIR = CURRENT_FILE.parent / 'configs'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 43,
    "symbol": "RUNS_DIR",
    "signature": "RUNS_DIR = CURRENT_FILE.parent / 'runs'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 44,
    "symbol": "RESULTS_DIR",
    "signature": "RESULTS_DIR = CURRENT_FILE.parent / 'results'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 45,
    "symbol": "PLOTS_DIR",
    "signature": "PLOTS_DIR = CURRENT_FILE.parent / 'plots'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 46,
    "symbol": "FIGURES_DIR",
    "signature": "FIGURES_DIR = REPO_ROOT / 'figures'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 48,
    "symbol": "T_VALUES",
    "signature": "T_VALUES = [2000.0, 2500.0, 3000.0]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 49,
    "symbol": "R_VALUES_RM",
    "signature": "R_VALUES_RM = [1.4, 1.6, 1.8, 2.0, 2.2]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 50,
    "symbol": "REFERENCE_T",
    "signature": "REFERENCE_T = 2500.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 51,
    "symbol": "SUPPLY_RATE_BASE",
    "signature": "SUPPLY_RATE_BASE = 5e-08",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 52,
    "symbol": "SUPPLY_EXPONENT",
    "signature": "SUPPLY_EXPONENT = 3.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 53,
    "symbol": "RELERR_TOL",
    "signature": "RELERR_TOL = 0.01",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 55,
    "symbol": "YAML_DUMPER",
    "signature": "YAML_DUMPER = YAML()",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 60,
    "symbol": "SeriesSpec",
    "signature": "class SeriesSpec",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 68,
    "symbol": "SERIES",
    "signature": "SERIES: Sequence[SeriesSpec] = [SeriesSpec(key='baseline', label='Baseline (no correction)', correct_fast_blowout=False, substep_fast_blowout=False), SeriesSpec(key='corrected', label='Fast blow-out correction', correct_fast_blowout=True, substep_fast_blowout=False), SeriesSpec(key='substepped', label='Fast blow-out sub-stepping', correct_fast_blowout=False, substep_fast_blowout=True)]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 89,
    "symbol": "BASE_CONFIG",
    "signature": "BASE_CONFIG: dict = {'chi_blow': 1.0, 'geometry': {'mode': '0D', 'r': None}, 'material': {'rho': 3000.0}, 'temps': {'T_M': None}, 'radiation': {}, 'sizes': {'s_min': 1e-06, 's_max': 3.0, 'n_bins': 40}, 'initial': {'mass_total': 1e-05, 's0_mode': 'upper'}, 'dynamics': {'e0': 0.5, 'i0': 0.05, 't_damp_orbits': 1000.0, 'f_wake': 1.0, 'rng_seed': 2025}, 'psd': {'alpha': 3.5, 'wavy_strength': 0.3}, 'qstar': {'Qs': 35000000.0, 'a_s': 0.38, 'B': 0.3, 'b_g': 1.36, 'v_ref_kms': [3.0, 5.0]}, 'supply': {'mode': 'const', 'const': {'prod_area_rate_kg_m2_s': SUPPLY_RATE_BASE}, 'mixing': {'epsilon_mix': 1.0}}, 'sinks': {'mode': 'none', 'enable_sublimation': False, 'enable_gas_drag': False}, 'surface': {'init_policy': 'clip_by_tau1', 'sigma_surf_init_override': None, 'use_tcoll': True}, 'numerics': {'t_end_years': 2.0, 'dt_init': 60000.0, 'safety': 0.1, 'atol': 1e-10, 'rtol': 1e-06}, 'io': {'outdir': None, 'debug_sinks': False, 'correct_fast_blowout': False, 'substep_fast_blowout': False, 'substep_max_ratio': 3.0}}",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 138,
    "symbol": "ensure_dirs",
    "signature": "ensure_dirs(paths: Iterable[Path]) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 143,
    "symbol": "build_config",
    "signature": "build_config(series: SeriesSpec, T: float, r_rm: float, outdir: Path) -> tuple[dict, float]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 159,
    "symbol": "write_yaml",
    "signature": "write_yaml(config: dict, path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 165,
    "symbol": "run_case",
    "signature": "run_case(config_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 170,
    "symbol": "_read_summary",
    "signature": "_read_summary(path: Path) -> dict",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 177,
    "symbol": "_read_timeseries",
    "signature": "_read_timeseries(path: Path) -> pd.DataFrame",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 183,
    "symbol": "_resolve_scalar",
    "signature": "_resolve_scalar(row: pd.Series, *keys: str, default: float | None=None) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 192,
    "symbol": "collect_metrics",
    "signature": "collect_metrics(run_dir: Path) -> dict",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 246,
    "symbol": "compare_with_reference",
    "signature": "compare_with_reference(df: pd.DataFrame) -> list[dict[str, float]]",
    "brief_usage": "Cross-check baseline branch against the archived radius sweep."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 304,
    "symbol": "make_heatmap",
    "signature": "make_heatmap(df: pd.DataFrame, path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/diagnostics/minimal/run_minimal_matrix.py",
    "line_no": 362,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 14,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 15,
    "symbol": "DEFAULT_COVERAGE_PATH",
    "signature": "DEFAULT_COVERAGE_PATH = Path(__file__).resolve().parent / 'reports' / 'coverage.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 16,
    "symbol": "DEFAULT_SUGGESTION_DIR",
    "signature": "DEFAULT_SUGGESTION_DIR = Path(__file__).resolve().parent / 'suggestions'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 17,
    "symbol": "DEFAULT_INDEX_PATH",
    "signature": "DEFAULT_INDEX_PATH = Path(__file__).resolve().parent / 'reports' / 'suggestions_index.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 21,
    "symbol": "UnreferencedSymbol",
    "signature": "class UnreferencedSymbol",
    "brief_usage": "A symbol lacking documentation coverage."
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 31,
    "symbol": "load_unreferenced_symbols",
    "signature": "load_unreferenced_symbols(path: Path) -> List[UnreferencedSymbol]",
    "brief_usage": "Return unreferenced symbol data loaded from *path*."
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 49,
    "symbol": "select_target_doc",
    "signature": "select_target_doc(file_path: str) -> str",
    "brief_usage": "Choose a documentation file suited to *file_path*."
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 63,
    "symbol": "build_patch_content",
    "signature": "build_patch_content(symbol: UnreferencedSymbol, doc_path: str) -> str",
    "brief_usage": "Return a git-style patch template referencing *symbol*."
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 86,
    "symbol": "slugify",
    "signature": "slugify(symbol: UnreferencedSymbol) -> str",
    "brief_usage": "Create a filesystem-friendly slug for *symbol*."
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 92,
    "symbol": "emit_suggestions",
    "signature": "emit_suggestions(symbols: Iterable[UnreferencedSymbol], suggestion_dir: Path) -> Dict[str, Dict[str, str]]",
    "brief_usage": "Write patch templates and return an index."
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 116,
    "symbol": "build_argument_parser",
    "signature": "build_argument_parser() -> argparse.ArgumentParser",
    "brief_usage": "Create the CLI parser."
  },
  {
    "file_path": "agent_test/rc_anchor_suggestions.py",
    "line_no": 142,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> int",
    "brief_usage": "Entry point for the CLI."
  },
  {
    "file_path": "agent_test/rc_ci_guard.py",
    "line_no": 12,
    "symbol": "DEFAULT_COVERAGE_PATH",
    "signature": "DEFAULT_COVERAGE_PATH = Path(__file__).resolve().parent / 'reports' / 'coverage.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_ci_guard.py",
    "line_no": 15,
    "symbol": "load_coverage",
    "signature": "load_coverage(path: Path) -> dict",
    "brief_usage": "Load coverage metrics from *path*."
  },
  {
    "file_path": "agent_test/rc_ci_guard.py",
    "line_no": 20,
    "symbol": "build_argument_parser",
    "signature": "build_argument_parser() -> argparse.ArgumentParser",
    "brief_usage": "Create the CLI parser."
  },
  {
    "file_path": "agent_test/rc_ci_guard.py",
    "line_no": 40,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> int",
    "brief_usage": "Entry point for the CLI."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 13,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 14,
    "symbol": "DEFAULT_SYMBOL_PATH",
    "signature": "DEFAULT_SYMBOL_PATH = Path(__file__).resolve().parent / 'reports' / 'ast_symbols.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 15,
    "symbol": "DEFAULT_REF_PATH",
    "signature": "DEFAULT_REF_PATH = Path(__file__).resolve().parent / 'reports' / 'doc_refs.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 16,
    "symbol": "DEFAULT_COVERAGE_JSON",
    "signature": "DEFAULT_COVERAGE_JSON = Path(__file__).resolve().parent / 'reports' / 'coverage.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 17,
    "symbol": "DEFAULT_COVERAGE_MD",
    "signature": "DEFAULT_COVERAGE_MD = Path(__file__).resolve().parent / 'reports' / 'coverage_report.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 21,
    "symbol": "Symbol",
    "signature": "class Symbol",
    "brief_usage": "Symbol definition extracted from the AST scan."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 32,
    "symbol": "DocRef",
    "signature": "class DocRef",
    "brief_usage": "Reference from documentation into the codebase."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 43,
    "symbol": "CoverageResult",
    "signature": "class CoverageResult",
    "brief_usage": "Aggregated coverage information."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 50,
    "symbol": "load_symbols",
    "signature": "load_symbols(path: Path) -> List[Symbol]",
    "brief_usage": "Load symbol definitions from *path*."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 67,
    "symbol": "load_doc_refs",
    "signature": "load_doc_refs(path: Path) -> List[DocRef]",
    "brief_usage": "Load documentation references from *path*."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 84,
    "symbol": "references_by_file",
    "signature": "references_by_file(refs: Iterable[DocRef]) -> Dict[str, List[DocRef]]",
    "brief_usage": "Group documentation references by target file."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 92,
    "symbol": "symbol_matches_reference",
    "signature": "symbol_matches_reference(symbol: Symbol, ref: DocRef) -> bool",
    "brief_usage": "Return True if *ref* overlaps *symbol*'s line span."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 99,
    "symbol": "filter_symbols",
    "signature": "filter_symbols(symbols: Iterable[Symbol], *, strict: bool) -> List[Symbol]",
    "brief_usage": "Filter symbols according to visibility and interest."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 109,
    "symbol": "compute_coverage",
    "signature": "compute_coverage(symbols: List[Symbol], refs_by_file: Dict[str, List[DocRef]], *, strict: bool, include_classes: bool) -> Dict[str, CoverageResult]",
    "brief_usage": "Compute documented coverage for each symbol."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 132,
    "symbol": "aggregate_metrics",
    "signature": "aggregate_metrics(symbols: List[Symbol], coverage: Dict[str, CoverageResult], strict: bool) -> Dict[str, object]",
    "brief_usage": "Aggregate coverage numbers by kind and file."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 197,
    "symbol": "render_markdown_report",
    "signature": "render_markdown_report(metrics: Dict[str, object], output: Path) -> None",
    "brief_usage": "Create a human-readable markdown coverage report."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 225,
    "symbol": "write_json_report",
    "signature": "write_json_report(metrics: Dict[str, object], output: Path) -> None",
    "brief_usage": "Persist metrics to JSON."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 231,
    "symbol": "build_argument_parser",
    "signature": "build_argument_parser() -> argparse.ArgumentParser",
    "brief_usage": "Create the CLI parser."
  },
  {
    "file_path": "agent_test/rc_compare.py",
    "line_no": 279,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> int",
    "brief_usage": "Entry point for the CLI."
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 14,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 15,
    "symbol": "DOC_SYNC_PATH",
    "signature": "DOC_SYNC_PATH = REPO_ROOT / 'tools' / 'doc_sync_agent.py'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 16,
    "symbol": "DEFAULT_COVERAGE_PATH",
    "signature": "DEFAULT_COVERAGE_PATH = Path(__file__).resolve().parent / 'reports' / 'coverage.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 17,
    "symbol": "DEFAULT_OUTPUT_PATH",
    "signature": "DEFAULT_OUTPUT_PATH = Path(__file__).resolve().parent / 'reports' / 'root_cause_probe.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 19,
    "symbol": "REQUIRED_DOCS",
    "signature": "REQUIRED_DOCS = ['analysis/overview.md', 'analysis/run-recipes.md', 'analysis/sinks_callgraph.md']",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 27,
    "symbol": "DocSyncDefaults",
    "signature": "class DocSyncDefaults",
    "brief_usage": "Container for DocSyncAgent defaults."
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 35,
    "symbol": "extract_doc_sync_defaults",
    "signature": "extract_doc_sync_defaults(path: Path) -> DocSyncDefaults",
    "brief_usage": "Parse *path* and return the defaults of interest."
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 60,
    "symbol": "load_coverage",
    "signature": "load_coverage(path: Path) -> dict",
    "brief_usage": "Load the coverage report JSON."
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 67,
    "symbol": "format_defaults_section",
    "signature": "format_defaults_section(defaults: DocSyncDefaults) -> List[str]",
    "brief_usage": "Render a section describing DocSyncAgent defaults."
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 82,
    "symbol": "evaluate_hypotheses",
    "signature": "evaluate_hypotheses(defaults: DocSyncDefaults) -> List[str]",
    "brief_usage": "Generate markdown describing hypotheses A–C."
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 122,
    "symbol": "summarise_grid_coverage",
    "signature": "summarise_grid_coverage(coverage: dict) -> List[str]",
    "brief_usage": "Summarise whether grid functions remain unreferenced."
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 147,
    "symbol": "build_argument_parser",
    "signature": "build_argument_parser() -> argparse.ArgumentParser",
    "brief_usage": "Create the CLI parser."
  },
  {
    "file_path": "agent_test/rc_root_cause_probe.py",
    "line_no": 173,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> int",
    "brief_usage": "Entry point for the CLI."
  },
  {
    "file_path": "agent_test/rc_run_all.py",
    "line_no": 14,
    "symbol": "SUITE_DIR",
    "signature": "SUITE_DIR = Path(__file__).resolve().parent",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_run_all.py",
    "line_no": 15,
    "symbol": "REPORTS_DIR",
    "signature": "REPORTS_DIR = SUITE_DIR / 'reports'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_run_all.py",
    "line_no": 18,
    "symbol": "build_argument_parser",
    "signature": "build_argument_parser() -> argparse.ArgumentParser",
    "brief_usage": "Create the CLI parser."
  },
  {
    "file_path": "agent_test/rc_run_all.py",
    "line_no": 42,
    "symbol": "run_step",
    "signature": "run_step(script: str, extra_args: Sequence[str]) -> subprocess.CompletedProcess",
    "brief_usage": "Invoke *script* located in the suite directory."
  },
  {
    "file_path": "agent_test/rc_run_all.py",
    "line_no": 53,
    "symbol": "load_json",
    "signature": "load_json(path: Path) -> Dict[str, object]",
    "brief_usage": "Load JSON content if the file exists."
  },
  {
    "file_path": "agent_test/rc_run_all.py",
    "line_no": 60,
    "symbol": "render_summary",
    "signature": "render_summary(steps: Dict[str, int], coverage: Dict[str, object], fail_under: float | None, json_only: bool) -> None",
    "brief_usage": "Write reports/summary.md summarising the run."
  },
  {
    "file_path": "agent_test/rc_run_all.py",
    "line_no": 118,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> int",
    "brief_usage": "Entry point for the CLI."
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 14,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 15,
    "symbol": "DEFAULT_SOURCE_ROOT",
    "signature": "DEFAULT_SOURCE_ROOT = REPO_ROOT / 'marsdisk'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 16,
    "symbol": "DEFAULT_REPORT_PATH",
    "signature": "DEFAULT_REPORT_PATH = Path(__file__).resolve().parent / 'reports' / 'ast_symbols.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 19,
    "symbol": "SKIP_DIR_NAMES",
    "signature": "SKIP_DIR_NAMES = {'__pycache__', '.venv', '.git', '.mypy_cache', '.pytest_cache', 'build', 'dist'}",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 31,
    "symbol": "SymbolRecord",
    "signature": "class SymbolRecord",
    "brief_usage": "Lightweight container describing a discovered symbol."
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 41,
    "symbol": "discover_python_files",
    "signature": "discover_python_files(root: Path, include_tests: bool) -> Iterator[Path]",
    "brief_usage": "Yield Python source files beneath *root* respecting the tests toggle."
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 51,
    "symbol": "is_trivial_init",
    "signature": "is_trivial_init(path: Path, tree: ast.Module) -> bool",
    "brief_usage": "Return True if the module is an __init__ with only imports/docstring."
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 66,
    "symbol": "symbol_kind",
    "signature": "symbol_kind(node: ast.AST) -> str",
    "brief_usage": "Return a human-readable kind label for a symbol node."
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 75,
    "symbol": "compute_end_lineno",
    "signature": "compute_end_lineno(node: ast.AST) -> int",
    "brief_usage": "Best-effort estimate of the end line for *node*."
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 87,
    "symbol": "collect_symbols",
    "signature": "collect_symbols(path: Path, *, include_private: bool, skip_trivial_init: bool) -> List[SymbolRecord]",
    "brief_usage": "Parse *path* and return symbol records filtered by visibility."
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 126,
    "symbol": "build_argument_parser",
    "signature": "build_argument_parser() -> argparse.ArgumentParser",
    "brief_usage": "Create the CLI parser."
  },
  {
    "file_path": "agent_test/rc_scan_ast.py",
    "line_no": 164,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> int",
    "brief_usage": "Entry point for the CLI."
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 14,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 15,
    "symbol": "DEFAULT_DOC_PATHS",
    "signature": "DEFAULT_DOC_PATHS = ['analysis/equations.md', 'analysis/overview.md', 'analysis/run-recipes.md', 'analysis/sinks_callgraph.md', 'analysis/AI_USAGE.md', 'analysis/inventory.json']",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 23,
    "symbol": "DEFAULT_REPORT_PATH",
    "signature": "DEFAULT_REPORT_PATH = Path(__file__).resolve().parent / 'reports' / 'doc_refs.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 25,
    "symbol": "COLON_PATTERN",
    "signature": "COLON_PATTERN = re.compile('\\\\[(marsdisk/[^\\\\]:]+\\\\.py):(\\\\d+)(?:[–-](\\\\d+))?\\\\]')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 28,
    "symbol": "HASH_PATTERN",
    "signature": "HASH_PATTERN = re.compile('\\\\[(marsdisk/[^\\\\]:]+\\\\.py)#([^\\\\s\\\\[]+)\\\\s+\\\\[L(\\\\d+)(?:[–-]L?(\\\\d+))?\\\\]\\\\]')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 34,
    "symbol": "DocReference",
    "signature": "class DocReference",
    "brief_usage": "Reference extracted from an analysis document."
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 44,
    "symbol": "read_document",
    "signature": "read_document(path: Path) -> str",
    "brief_usage": "Return the UTF-8 content of *path*."
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 49,
    "symbol": "parse_references",
    "signature": "parse_references(text: str, doc_path: Path) -> Tuple[List[DocReference], List[Dict[str, str]]]",
    "brief_usage": "Parse *text* for code references, returning references and issues."
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 77,
    "symbol": "_register_reference",
    "signature": "_register_reference(refs: List[DocReference], issues: List[Dict[str, str]], seen: set[Tuple[str, int, int]], file_path: str, start: int, end: int, doc_path: Path, anchor: str | None) -> Tuple[List[DocReference], List[Dict[str, str]], set[Tuple[str, int, int]]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 117,
    "symbol": "normalise_doc_paths",
    "signature": "normalise_doc_paths(paths: Iterable[str]) -> List[Path]",
    "brief_usage": "Convert CLI doc path arguments to absolute Path objects."
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 128,
    "symbol": "build_argument_parser",
    "signature": "build_argument_parser() -> argparse.ArgumentParser",
    "brief_usage": "Create the CLI parser."
  },
  {
    "file_path": "agent_test/rc_scan_docs.py",
    "line_no": 148,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> int",
    "brief_usage": "Entry point for the CLI."
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 13,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[2]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 15,
    "symbol": "LINE_REF_PATTERN",
    "signature": "LINE_REF_PATTERN = re.compile('(marsdisk/[A-Za-z0-9_/\\\\.-]+\\\\.py):(\\\\d+)(?:[–-](\\\\d+))?')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 19,
    "symbol": "ANCHOR_PATTERN",
    "signature": "ANCHOR_PATTERN = re.compile('(marsdisk/[A-Za-z0-9_/\\\\.-]+\\\\.py)#([A-Za-z0-9_\\\\.]+)(?:\\\\s*\\\\[(?:L)?(\\\\d+)(?:[–-](?:L)?(\\\\d+))?\\\\])?')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 23,
    "symbol": "DEFAULT_MARKDOWN_ROOT",
    "signature": "DEFAULT_MARKDOWN_ROOT = REPO_ROOT / 'analysis'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 24,
    "symbol": "DEFAULT_MARKDOWN_GLOB",
    "signature": "DEFAULT_MARKDOWN_GLOB = '**/*.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 25,
    "symbol": "UNRESOLVED_LOG_PATH",
    "signature": "UNRESOLVED_LOG_PATH = REPO_ROOT / 'analysis' / 'coverage' / 'anchor_unresolved.tsv'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 26,
    "symbol": "MODULE_SENTINEL",
    "signature": "MODULE_SENTINEL = '__module__'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 30,
    "symbol": "SymbolRange",
    "signature": "class SymbolRange",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 42,
    "symbol": "UnresolvedEntry",
    "signature": "class UnresolvedEntry",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 49,
    "symbol": "FileChange",
    "signature": "class FileChange",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 77,
    "symbol": "SymbolResolver",
    "signature": "class SymbolResolver",
    "brief_usage": "Resolve source symbol ownership for code references."
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 314,
    "symbol": "AnchorSync",
    "signature": "class AnchorSync",
    "brief_usage": "Perform anchor replacement across analysis markdown files."
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 417,
    "symbol": "_discover_markdown_paths",
    "signature": "_discover_markdown_paths(root: Path, pattern: str) -> List[Path]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/anchor_sync.py",
    "line_no": 421,
    "symbol": "main",
    "signature": "main(argv: Optional[Sequence[str]]=None) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 12,
    "symbol": "TOOLS_DIR",
    "signature": "TOOLS_DIR = Path(__file__).resolve().parent",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 13,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = TOOLS_DIR.parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 24,
    "symbol": "ANCHOR_PATTERN",
    "signature": "ANCHOR_PATTERN = anchor_sync.ANCHOR_PATTERN",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 25,
    "symbol": "MODULE_SENTINEL",
    "signature": "MODULE_SENTINEL = anchor_sync.MODULE_SENTINEL",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 28,
    "symbol": "COVERAGE_JSON_PATH",
    "signature": "COVERAGE_JSON_PATH = REPO_ROOT / 'analysis' / 'coverage' / 'coverage.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 32,
    "symbol": "AnchorOccurrence",
    "signature": "class AnchorOccurrence",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 43,
    "symbol": "load_coverage_json",
    "signature": "load_coverage_json() -> Dict[str, object]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 55,
    "symbol": "discover_markdown_paths",
    "signature": "discover_markdown_paths() -> List[Path]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 66,
    "symbol": "detect_anchor_range_mismatches",
    "signature": "detect_anchor_range_mismatches(resolver: SymbolResolver) -> List[AnchorOccurrence]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 123,
    "symbol": "format_rate",
    "signature": "format_rate(value: float) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 127,
    "symbol": "parse_args",
    "signature": "parse_args(argv: Optional[Sequence[str]]) -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 144,
    "symbol": "summarize_anchors",
    "signature": "summarize_anchors(mismatches: Sequence[AnchorOccurrence], limit: int=3) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/check_docs.py",
    "line_no": 164,
    "symbol": "main",
    "signature": "main(argv: Optional[Sequence[str]]=None) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 11,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[2]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 12,
    "symbol": "ANALYSIS_DIR",
    "signature": "ANALYSIS_DIR = REPO_ROOT / 'analysis'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 13,
    "symbol": "EQUATIONS_PATH",
    "signature": "EQUATIONS_PATH = ANALYSIS_DIR / 'equations.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 14,
    "symbol": "INVENTORY_PATH",
    "signature": "INVENTORY_PATH = ANALYSIS_DIR / 'inventory.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 15,
    "symbol": "OUTPUT_PATH",
    "signature": "OUTPUT_PATH = ANALYSIS_DIR / 'coverage' / 'equations_todo.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 17,
    "symbol": "ANCHOR_PATTERN",
    "signature": "ANCHOR_PATTERN = re.compile('(marsdisk/[A-Za-z0-9_/\\\\.-]+\\\\.py)#[A-Za-z0-9_\\\\.]+')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 18,
    "symbol": "SECTION_PATTERN",
    "signature": "SECTION_PATTERN = re.compile('^###\\\\s+(.*)$', re.MULTILINE)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 22,
    "symbol": "InventoryEntry",
    "signature": "class InventoryEntry",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 28,
    "symbol": "load_inventory",
    "signature": "load_inventory() -> Dict[str, List[InventoryEntry]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 50,
    "symbol": "iter_sections",
    "signature": "iter_sections(text: str) -> Iterable[Tuple[str, str]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 60,
    "symbol": "has_anchor",
    "signature": "has_anchor(section_body: str) -> bool",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 64,
    "symbol": "extract_file_from_title",
    "signature": "extract_file_from_title(title: str) -> Optional[str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 73,
    "symbol": "choose_candidates",
    "signature": "choose_candidates(entries: List[InventoryEntry], limit: int=3) -> List[str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 92,
    "symbol": "build_report",
    "signature": "build_report(missing_sections: List[Tuple[str, str]], inventory: Dict[str, List[InventoryEntry]]) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/list_equations_todo.py",
    "line_no": 112,
    "symbol": "main",
    "signature": "main(argv: Optional[Sequence[str]]=None) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 10,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[2]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 11,
    "symbol": "ANALYSIS_DIR",
    "signature": "ANALYSIS_DIR = REPO_ROOT / 'analysis'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 12,
    "symbol": "COVERAGE_DIR",
    "signature": "COVERAGE_DIR = ANALYSIS_DIR / 'coverage'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 14,
    "symbol": "INVENTORY_PATH",
    "signature": "INVENTORY_PATH = ANALYSIS_DIR / 'inventory.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 15,
    "symbol": "SYMBOLS_RAW_PATH",
    "signature": "SYMBOLS_RAW_PATH = ANALYSIS_DIR / 'symbols.raw.txt'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 16,
    "symbol": "EQUATIONS_PATH",
    "signature": "EQUATIONS_PATH = ANALYSIS_DIR / 'equations.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 17,
    "symbol": "SINKS_DOC_PATH",
    "signature": "SINKS_DOC_PATH = ANALYSIS_DIR / 'sinks_callgraph.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 19,
    "symbol": "ANCHOR_PATTERN",
    "signature": "ANCHOR_PATTERN = re.compile('(marsdisk/[A-Za-z0-9_/\\\\.-]+\\\\.py)#([A-Za-z0-9_\\\\.]+)')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 22,
    "symbol": "UNIT_BRACKETS_PATTERN",
    "signature": "UNIT_BRACKETS_PATTERN = re.compile('\\\\[[^\\\\]]*[A-Za-z][^\\\\]]*\\\\]')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 24,
    "symbol": "AUTOGEN_BEGIN",
    "signature": "AUTOGEN_BEGIN = '<!-- AUTOGEN'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 25,
    "symbol": "AUTOGEN_END",
    "signature": "AUTOGEN_END = 'AUTOGEN-END -->'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 29,
    "symbol": "SymbolRef",
    "signature": "class SymbolRef",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 34,
    "symbol": "load_inventory",
    "signature": "load_inventory() -> List[dict]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 46,
    "symbol": "load_symbol_kinds",
    "signature": "load_symbol_kinds() -> Dict[SymbolRef, str]",
    "brief_usage": "Map symbols to rough kinds using symbols.raw.txt lines."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 77,
    "symbol": "discover_markdown_paths",
    "signature": "discover_markdown_paths() -> List[Path]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 88,
    "symbol": "collect_anchor_occurrences",
    "signature": "collect_anchor_occurrences(paths: Sequence[Path]) -> List[Tuple[Path, SymbolRef]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 99,
    "symbol": "classify_symbols",
    "signature": "classify_symbols(inventory: Sequence[dict], symbol_kinds: Dict[SymbolRef, str]) -> Tuple[Dict[SymbolRef, dict], List[SymbolRef]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 134,
    "symbol": "compute_function_reference_rate",
    "signature": "compute_function_reference_rate(public_functions: Sequence[SymbolRef], occurrences: Sequence[Tuple[Path, SymbolRef]]) -> Tuple[int, int, List[SymbolRef]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 150,
    "symbol": "compute_anchor_consistency_rate",
    "signature": "compute_anchor_consistency_rate(occurrences: Sequence[Tuple[Path, SymbolRef]], known_symbols: Dict[SymbolRef, dict]) -> Tuple[int, int, List[Tuple[Path, SymbolRef]]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 168,
    "symbol": "extract_sections_with_equations",
    "signature": "extract_sections_with_equations(content: str) -> List[str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 186,
    "symbol": "extract_fenced_blocks",
    "signature": "extract_fenced_blocks(section: str) -> List[Tuple[str, str]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 211,
    "symbol": "compute_equation_unit_rate",
    "signature": "compute_equation_unit_rate(equations_path: Path) -> Tuple[int, int]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 242,
    "symbol": "extract_autogen_block",
    "signature": "extract_autogen_block(text: str) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 257,
    "symbol": "compute_sinks_callgraph_flag",
    "signature": "compute_sinks_callgraph_flag(doc_path: Path) -> bool",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 279,
    "symbol": "format_rate",
    "signature": "format_rate(numerator: int, denominator: int) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 285,
    "symbol": "rate_to_percent",
    "signature": "rate_to_percent(rate: float) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 289,
    "symbol": "build_coverage_markdown",
    "signature": "build_coverage_markdown(function_rate: Tuple[int, int], anchor_rate: Tuple[int, int], equation_rate: Tuple[int, int], sinks_flag: bool, holes: Sequence[SymbolRef]) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 337,
    "symbol": "build_coverage_json",
    "signature": "build_coverage_json(function_rate: Tuple[int, int], anchor_rate: Tuple[int, int], equation_rate: Tuple[int, int], sinks_flag: bool, holes: Sequence[SymbolRef]) -> dict",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 369,
    "symbol": "write_text",
    "signature": "write_text(path: Path, content: str) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 374,
    "symbol": "write_json",
    "signature": "write_json(path: Path, payload: dict) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_coverage.py",
    "line_no": 379,
    "symbol": "main",
    "signature": "main() -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 12,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[2]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 13,
    "symbol": "ANALYSIS_DIR",
    "signature": "ANALYSIS_DIR = REPO_ROOT / 'analysis'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 14,
    "symbol": "INVENTORY_PATH",
    "signature": "INVENTORY_PATH = ANALYSIS_DIR / 'inventory.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 15,
    "symbol": "TARGET_DOC",
    "signature": "TARGET_DOC = ANALYSIS_DIR / 'sinks_callgraph.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 17,
    "symbol": "AUTOGEN_START",
    "signature": "AUTOGEN_START = '<!-- AUTOGEN:CALLGRAPH START -->'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 18,
    "symbol": "AUTOGEN_END",
    "signature": "AUTOGEN_END = '<!-- AUTOGEN:CALLGRAPH END -->'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 22,
    "symbol": "SymbolKey",
    "signature": "class SymbolKey",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 27,
    "symbol": "load_inventory",
    "signature": "load_inventory() -> Dict[SymbolKey, dict]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 43,
    "symbol": "ensure_symbols_present",
    "signature": "ensure_symbols_present(inv: Dict[SymbolKey, dict], symbols: Iterable[SymbolKey]) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 50,
    "symbol": "make_node_label",
    "signature": "make_node_label(key: SymbolKey) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 54,
    "symbol": "build_mermaid",
    "signature": "build_mermaid(inv: Dict[SymbolKey, dict]) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 94,
    "symbol": "inject_autogen_block",
    "signature": "inject_autogen_block(original: str, block: str) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 116,
    "symbol": "parse_args",
    "signature": "parse_args(argv: Optional[Sequence[str]]) -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "analysis/tools/make_sinks_callgraph.py",
    "line_no": 128,
    "symbol": "main",
    "signature": "main(argv: Optional[Sequence[str]]=None) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/analysis/beta_sampler.py",
    "line_no": 39,
    "symbol": "BetaSamplingConfig",
    "signature": "class BetaSamplingConfig",
    "brief_usage": "Configuration bundle for :func:`sample_beta_over_orbit`."
  },
  {
    "file_path": "marsdisk/analysis/beta_sampler.py",
    "line_no": 91,
    "symbol": "_prepare_case_config",
    "signature": "_prepare_case_config(cfg: Config, *, r_rm: float, T_M: float, qpr_table_path: Path, dt_over_t_blow_max: float) -> Config",
    "brief_usage": "Return a deep copy of ``cfg`` customised for a single (r, T) sample."
  },
  {
    "file_path": "marsdisk/analysis/beta_sampler.py",
    "line_no": 136,
    "symbol": "_run_single_case",
    "signature": "_run_single_case(args: Mapping[str, Any]) -> Dict[str, Any]",
    "brief_usage": "Worker helper executing a single zero-dimensional run."
  },
  {
    "file_path": "marsdisk/analysis/beta_sampler.py",
    "line_no": 211,
    "symbol": "_iter_cases",
    "signature": "_iter_cases(r_values: Sequence[float], T_values: Sequence[float]) -> Iterable[Tuple[int, int, float, float]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/analysis/beta_sampler.py",
    "line_no": 217,
    "symbol": "sample_beta_over_orbit",
    "signature": "sample_beta_over_orbit(cfg: BetaSamplingConfig) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]",
    "brief_usage": "Evaluate β(r, T, t) for one orbital period over the provided grids."
  },
  {
    "file_path": "marsdisk/analysis/massloss_sampler.py",
    "line_no": 28,
    "symbol": "_prepare_config",
    "signature": "_prepare_config(base_cfg: Config, *, r_rm: float, T_M: float, qpr_table_path: Path, dt_over_t_blow_max: float, sinks_mode: str, enable_sublimation: Optional[bool], enable_gas_drag: bool) -> Config",
    "brief_usage": "Return a deep-copied configuration tailored to a single sample."
  },
  {
    "file_path": "marsdisk/analysis/massloss_sampler.py",
    "line_no": 81,
    "symbol": "_percentile",
    "signature": "_percentile(values: Iterable[float], q: float) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/analysis/massloss_sampler.py",
    "line_no": 94,
    "symbol": "_median_dt_ratio",
    "signature": "_median_dt_ratio(series: pd.Series) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/analysis/massloss_sampler.py",
    "line_no": 100,
    "symbol": "_p90_dt_ratio",
    "signature": "_p90_dt_ratio(series: pd.Series) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/analysis/massloss_sampler.py",
    "line_no": 106,
    "symbol": "_float_or_nan",
    "signature": "_float_or_nan(payload: Dict[str, Any], key: str) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/analysis/massloss_sampler.py",
    "line_no": 114,
    "symbol": "sample_mass_loss_one_orbit",
    "signature": "sample_mass_loss_one_orbit(r_RM: float, T_M: float, base_yaml: Path | str, qpr_table: Path | str, *, dt_over_t_blow_max: float=0.1, sinks_mode: str='sublimation', enable_sublimation: Optional[bool]=None, enable_gas_drag: bool=False, overrides: Optional[Sequence[str]]=None) -> Dict[str, Any]",
    "brief_usage": "Execute a single-orbit 0D run and return aggregated mass-loss metrics."
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 13,
    "symbol": "G",
    "signature": "G: float = 6.6743e-11",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 16,
    "symbol": "C",
    "signature": "C: float = 299792458.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 19,
    "symbol": "SIGMA_SB",
    "signature": "SIGMA_SB: float = 5.670374419e-08",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 22,
    "symbol": "R_GAS",
    "signature": "R_GAS: float = 8.314462618",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 25,
    "symbol": "M_MARS",
    "signature": "M_MARS: float = 6.4171e+23",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 26,
    "symbol": "R_MARS",
    "signature": "R_MARS: float = 3389500.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 29,
    "symbol": "RHO_RANGE",
    "signature": "RHO_RANGE: Tuple[float, float] = (1000.0, 5000.0)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 32,
    "symbol": "T_M_RANGE",
    "signature": "T_M_RANGE: Tuple[float, float] = (1500.0, 2500.0)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/constants.py",
    "line_no": 36,
    "symbol": "MarsConstants",
    "signature": "class MarsConstants",
    "brief_usage": "Convenience container bundling frequently used constants."
  },
  {
    "file_path": "marsdisk/errors.py",
    "line_no": 5,
    "symbol": "MarsDiskError",
    "signature": "class MarsDiskError(Exception)",
    "brief_usage": "Base exception for Mars disk simulation errors."
  },
  {
    "file_path": "marsdisk/grid.py",
    "line_no": 17,
    "symbol": "omega_kepler",
    "signature": "omega_kepler(r: float) -> float",
    "brief_usage": "Return the Keplerian angular frequency :math:`\\Omega(r)`."
  },
  {
    "file_path": "marsdisk/grid.py",
    "line_no": 34,
    "symbol": "v_kepler",
    "signature": "v_kepler(r: float) -> float",
    "brief_usage": "Return the Keplerian orbital velocity :math:`v_K(r)`."
  },
  {
    "file_path": "marsdisk/grid.py",
    "line_no": 52,
    "symbol": "RadialGrid",
    "signature": "class RadialGrid",
    "brief_usage": "Minimal 1D radial grid."
  },
  {
    "file_path": "marsdisk/grid.py",
    "line_no": 90,
    "symbol": "omega",
    "signature": "omega(r: float) -> float",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/grid.py",
    "line_no": 93,
    "symbol": "v_keplerian",
    "signature": "v_keplerian(r: float) -> float",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 22,
    "symbol": "PACKAGE_DATA_DIR",
    "signature": "PACKAGE_DATA_DIR = Path(__file__).resolve().parent / 'data'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 23,
    "symbol": "REPO_DATA_DIR",
    "signature": "REPO_DATA_DIR = Path(__file__).resolve().parents[2] / 'data'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 25,
    "symbol": "DATA_DIR",
    "signature": "DATA_DIR = PACKAGE_DATA_DIR",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 28,
    "symbol": "_approx_phi",
    "signature": "_approx_phi(tau: float, w0: float, g: float) -> float",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 34,
    "symbol": "QPrTable",
    "signature": "class QPrTable",
    "brief_usage": "Class definition"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 98,
    "symbol": "PhiTable",
    "signature": "class PhiTable",
    "brief_usage": "Class definition"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 145,
    "symbol": "_read_qpr_frame_h5datasets",
    "signature": "_read_qpr_frame_h5datasets(path: Path) -> pd.DataFrame",
    "brief_usage": "HDF5 datasetsからQ_prテーブルを読み込む。Planck 平均⟨Q_pr⟩."
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 199,
    "symbol": "_read_qpr_frame",
    "signature": "_read_qpr_frame(path: Path) -> pd.DataFrame",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 217,
    "symbol": "_EXPECTED_QPR_LOCATIONS",
    "signature": "_EXPECTED_QPR_LOCATIONS: Sequence[Path] = (REPO_DATA_DIR / 'qpr_table.csv', PACKAGE_DATA_DIR / 'qpr_planck.h5', PACKAGE_DATA_DIR / 'qpr_planck.csv')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 224,
    "symbol": "_QPR_TABLE",
    "signature": "_QPR_TABLE: Optional[QPrTable]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 225,
    "symbol": "_QPR_TABLE_PATH",
    "signature": "_QPR_TABLE_PATH: Optional[Path]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 226,
    "symbol": "_PHI_TABLE",
    "signature": "_PHI_TABLE: Optional[PhiTable]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 228,
    "symbol": "_QPR_TABLE",
    "signature": "_QPR_TABLE = None",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 229,
    "symbol": "_QPR_TABLE_PATH",
    "signature": "_QPR_TABLE_PATH = None",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 259,
    "symbol": "interp_qpr",
    "signature": "interp_qpr(s: float, T_M: float) -> float",
    "brief_usage": "Interpolate the mean radiation pressure efficiency."
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 273,
    "symbol": "interp_phi",
    "signature": "interp_phi(tau: float, w0: float, g: float) -> float",
    "brief_usage": "Interpolate the self-shielding factor Φ."
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 283,
    "symbol": "load_qpr_table",
    "signature": "load_qpr_table(path: str | Path) -> Callable[[float, float], float]",
    "brief_usage": "Read a table file and build an interpolator. Planck averaged ⟨Q_pr⟩."
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 298,
    "symbol": "load_phi_table",
    "signature": "load_phi_table(path: str | Path) -> Callable[[float], float]",
    "brief_usage": "Create a clamped interpolator from a Φ(τ) CSV file. Self-shielding Φ."
  },
  {
    "file_path": "marsdisk/io/tables.py",
    "line_no": 356,
    "symbol": "get_qpr_table_path",
    "signature": "get_qpr_table_path() -> Optional[Path]",
    "brief_usage": "Return the resolved path of the active ⟨Q_pr⟩ table, if any."
  },
  {
    "file_path": "marsdisk/io/writer.py",
    "line_no": 20,
    "symbol": "_ensure_parent",
    "signature": "_ensure_parent(path: Path) -> None",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/io/writer.py",
    "line_no": 24,
    "symbol": "write_parquet",
    "signature": "write_parquet(df: pd.DataFrame, path: Path) -> None",
    "brief_usage": "Write a DataFrame to a Parquet file using ``pyarrow``."
  },
  {
    "file_path": "marsdisk/io/writer.py",
    "line_no": 185,
    "symbol": "write_summary",
    "signature": "write_summary(summary: Mapping[str, Any], path: Path) -> None",
    "brief_usage": "Write a summary dictionary to ``summary.json``."
  },
  {
    "file_path": "marsdisk/io/writer.py",
    "line_no": 196,
    "symbol": "write_run_config",
    "signature": "write_run_config(config: Mapping[str, Any], path: Path) -> None",
    "brief_usage": "Persist the deterministic run configuration metadata."
  },
  {
    "file_path": "marsdisk/io/writer.py",
    "line_no": 204,
    "symbol": "write_mass_budget",
    "signature": "write_mass_budget(records: Iterable[Mapping[str, Any]], path: Path) -> None",
    "brief_usage": "Write mass conservation diagnostics to a CSV file."
  },
  {
    "file_path": "marsdisk/io/writer.py",
    "line_no": 211,
    "symbol": "write_orbit_rollup",
    "signature": "write_orbit_rollup(rows: Iterable[Mapping[str, Any]], path: Path) -> None",
    "brief_usage": "Serialise orbit-by-orbit loss diagnostics."
  },
  {
    "file_path": "marsdisk/physics/collide.py",
    "line_no": 18,
    "symbol": "compute_collision_kernel_C1",
    "signature": "compute_collision_kernel_C1(N: Iterable[float], s: Iterable[float], H: Iterable[float], v_rel: float | np.ndarray) -> np.ndarray",
    "brief_usage": "Return the symmetric collision kernel :math:`C_{ij}`."
  },
  {
    "file_path": "marsdisk/physics/collide.py",
    "line_no": 80,
    "symbol": "compute_prod_subblow_area_rate_C2",
    "signature": "compute_prod_subblow_area_rate_C2(C: np.ndarray, m_subblow: np.ndarray) -> float",
    "brief_usage": "Return the production rate of sub-blowout material."
  },
  {
    "file_path": "marsdisk/physics/dynamics.py",
    "line_no": 18,
    "symbol": "v_ij",
    "signature": "v_ij(e: float, i: float, v_k: float=1.0) -> float",
    "brief_usage": "Return the mutual relative velocity ``v_ij``."
  },
  {
    "file_path": "marsdisk/physics/dynamics.py",
    "line_no": 48,
    "symbol": "solve_c_eq",
    "signature": "solve_c_eq(tau: float, e: float, eps_model: Callable[[float], float], *, f_wake: float=1.0, max_iter: int=100, tol: float=1e-06) -> float",
    "brief_usage": "Return the equilibrium velocity dispersion ``c_eq``."
  },
  {
    "file_path": "marsdisk/physics/dynamics.py",
    "line_no": 109,
    "symbol": "update_e",
    "signature": "update_e(e: float, e_eq: float, t_damp: float, dt: float) -> float",
    "brief_usage": "Relax ``e`` towards ``e_eq`` over the damping time scale."
  },
  {
    "file_path": "marsdisk/physics/fragments.py",
    "line_no": 30,
    "symbol": "compute_q_r_F2",
    "signature": "compute_q_r_F2(m1: float, m2: float, v: float) -> float",
    "brief_usage": "Return the reduced specific kinetic energy :math:`Q_R`."
  },
  {
    "file_path": "marsdisk/physics/fragments.py",
    "line_no": 64,
    "symbol": "compute_largest_remnant_mass_fraction_F2",
    "signature": "compute_largest_remnant_mass_fraction_F2(m1: float, m2: float, v: float, q_rd_star: float) -> float",
    "brief_usage": "Return the mass fraction of the largest remnant."
  },
  {
    "file_path": "marsdisk/physics/fragments.py",
    "line_no": 101,
    "symbol": "s_sub_boundary",
    "signature": "s_sub_boundary(T: float, T_sub: float=1300.0, *, t_ref: float | None=None, rho: float | None=None, sub_params: SublimationParams | None=None) -> float",
    "brief_usage": "Return the sublimation boundary size ``s_sub``."
  },
  {
    "file_path": "marsdisk/physics/fragments.py",
    "line_no": 167,
    "symbol": "compute_s_min_F2",
    "signature": "compute_s_min_F2(a_blow: float, T: float, T_sub: float=1300.0, *, t_ref: float | None=None, rho: float | None=None, sub_params: SublimationParams | None=None) -> float",
    "brief_usage": "Legacy helper that now returns the blow-out size only."
  },
  {
    "file_path": "marsdisk/physics/initfields.py",
    "line_no": 14,
    "symbol": "_DEF_EPS",
    "signature": "_DEF_EPS = 1e-12",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/initfields.py",
    "line_no": 17,
    "symbol": "sigma_from_Minner",
    "signature": "sigma_from_Minner(M_in: float, r_in: float, r_out: float, p_index: float) -> Callable[[float], float]",
    "brief_usage": "Return ``Σ(r)`` for an inner disk of total mass ``M_in``."
  },
  {
    "file_path": "marsdisk/physics/initfields.py",
    "line_no": 47,
    "symbol": "surf_sigma_init",
    "signature": "surf_sigma_init(sigma: float, kappa_eff: Optional[float], policy: str, f_surf: float | None=None, sigma_override: float | None=None) -> float",
    "brief_usage": "Map mid-plane ``Σ`` to the initial surface density ``Σ_surf``."
  },
  {
    "file_path": "marsdisk/physics/psd.py",
    "line_no": 30,
    "symbol": "update_psd_state",
    "signature": "update_psd_state(*, s_min: float, s_max: float, alpha: float, wavy_strength: float, n_bins: int=40, rho: float=3000.0, wavy_decay: float=0.0, alpha_mode: str='size') -> Dict[str, np.ndarray | float]",
    "brief_usage": "Return a particle size distribution state."
  },
  {
    "file_path": "marsdisk/physics/psd.py",
    "line_no": 121,
    "symbol": "compute_kappa",
    "signature": "compute_kappa(psd_state: Dict[str, np.ndarray | float]) -> float",
    "brief_usage": "Compute the mass opacity ``\\kappa`` from a PSD state (P1)."
  },
  {
    "file_path": "marsdisk/physics/psd.py",
    "line_no": 149,
    "symbol": "apply_uniform_size_drift",
    "signature": "apply_uniform_size_drift(psd_state: Dict[str, np.ndarray | float], *, ds_dt: float, dt: float, floor: float, sigma_surf: float) -> tuple[float, float, Dict[str, float]]",
    "brief_usage": "Erode all PSD bins by a uniform ``ds/dt`` and update ``Sigma_surf``."
  },
  {
    "file_path": "marsdisk/physics/psd.py",
    "line_no": 267,
    "symbol": "evolve_min_size",
    "signature": "evolve_min_size(s_min_prev: float, *, dt: float, model: Optional[str]=None, params: Optional[Mapping[str, float]]=None, T: Optional[float]=None, rho: Optional[float]=None, s_floor: Optional[float]=None, sublimation_params: Optional[SublimationParams]=None) -> float",
    "brief_usage": "Return the evolved minimum grain size after a time step ``dt``."
  },
  {
    "file_path": "marsdisk/physics/qstar.py",
    "line_no": 14,
    "symbol": "_COEFFS",
    "signature": "_COEFFS: Dict[float, Tuple[float, float, float, float]] = {3.0: (35000000.0, 0.38, 0.3, 1.36), 5.0: (70000000.0, 0.38, 0.5, 1.36)}",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/qstar.py",
    "line_no": 19,
    "symbol": "_V_MIN",
    "signature": "_V_MIN = min(_COEFFS.keys())",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/qstar.py",
    "line_no": 20,
    "symbol": "_V_MAX",
    "signature": "_V_MAX = max(_COEFFS.keys())",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/qstar.py",
    "line_no": 23,
    "symbol": "_q_d_star",
    "signature": "_q_d_star(s: float, rho: float, coeffs: Tuple[float, float, float, float]) -> float",
    "brief_usage": "Evaluate :math:`Q_D^*` using a single coefficient set."
  },
  {
    "file_path": "marsdisk/physics/qstar.py",
    "line_no": 31,
    "symbol": "compute_q_d_star_F1",
    "signature": "compute_q_d_star_F1(s: float, rho: float, v_kms: float) -> float",
    "brief_usage": "Return the catastrophic disruption threshold ``Q_D^*``."
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 26,
    "symbol": "_QPR_LOOKUP",
    "signature": "_QPR_LOOKUP: type_QPr | None = tables.interp_qpr",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 28,
    "symbol": "DEFAULT_Q_PR",
    "signature": "DEFAULT_Q_PR: float = 1.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 29,
    "symbol": "DEFAULT_RHO",
    "signature": "DEFAULT_RHO: float = 3000.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 30,
    "symbol": "DEFAULT_T_M",
    "signature": "DEFAULT_T_M: float = 2000.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 31,
    "symbol": "T_M_RANGE",
    "signature": "T_M_RANGE: tuple[float, float] = (1000.0, 6500.0)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 32,
    "symbol": "BLOWOUT_BETA_THRESHOLD",
    "signature": "BLOWOUT_BETA_THRESHOLD: float = 0.5",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 37,
    "symbol": "_validate_size",
    "signature": "_validate_size(value: float, *, name: str='s') -> float",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 47,
    "symbol": "_validate_density",
    "signature": "_validate_density(value: Optional[float]) -> float",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 60,
    "symbol": "_validate_temperature",
    "signature": "_validate_temperature(value: Optional[float]) -> float",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 74,
    "symbol": "_validate_qpr",
    "signature": "_validate_qpr(value: Optional[float]) -> Optional[float]",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 86,
    "symbol": "_resolve_qpr",
    "signature": "_resolve_qpr(s: float, T_M: float, Q_pr: Optional[float], table: type_QPr | None, interp: type_QPr | None) -> float",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 119,
    "symbol": "load_qpr_table",
    "signature": "load_qpr_table(path: Path | str) -> type_QPr",
    "brief_usage": "Load a table file and cache the interpolator. Planck averaged ⟨Q_pr⟩."
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 149,
    "symbol": "qpr_lookup",
    "signature": "qpr_lookup(s: float, T_M: float, table: type_QPr | None=None) -> float",
    "brief_usage": "Return the efficiency for a grain size and temperature. Planck averaged ⟨Q_pr⟩."
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 206,
    "symbol": "planck_mean_qpr",
    "signature": "planck_mean_qpr(s: float, T_M: float, Q_pr: Optional[float]=None, table: type_QPr | None=None, interp: type_QPr | None=None) -> float",
    "brief_usage": "Return the effective grey-body ⟨Q_pr⟩ using the active lookup table."
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 220,
    "symbol": "beta",
    "signature": "beta(s: float, rho: Optional[float], T_M: Optional[float], Q_pr: Optional[float]=None, table: type_QPr | None=None, interp: type_QPr | None=None) -> float",
    "brief_usage": "Compute the ratio ``β`` of radiation pressure to gravity (R2)."
  },
  {
    "file_path": "marsdisk/physics/radiation.py",
    "line_no": 244,
    "symbol": "blowout_radius",
    "signature": "blowout_radius(rho: Optional[float], T_M: Optional[float], Q_pr: Optional[float]=None, table: type_QPr | None=None, interp: type_QPr | None=None) -> float",
    "brief_usage": "Return the blow-out grain size ``s_blow`` for ``β = 0.5`` (R3)."
  },
  {
    "file_path": "marsdisk/physics/shielding.py",
    "line_no": 26,
    "symbol": "_read_tau_range",
    "signature": "_read_tau_range(table_path: Path) -> tuple[float, float] | None",
    "brief_usage": "Extract τ range from a CSV file. Self-shielding Φ."
  },
  {
    "file_path": "marsdisk/physics/shielding.py",
    "line_no": 52,
    "symbol": "load_phi_table",
    "signature": "load_phi_table(path: Path | str) -> Callable[[float], float]",
    "brief_usage": "Load a τ-only Φ lookup table with logging. Self-shielding Φ."
  },
  {
    "file_path": "marsdisk/physics/shielding.py",
    "line_no": 70,
    "symbol": "_infer_phi_table",
    "signature": "_infer_phi_table(func: Callable[..., float]) -> Optional[object]",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/physics/shielding.py",
    "line_no": 81,
    "symbol": "effective_kappa",
    "signature": "effective_kappa(kappa: float, tau: float, phi_fn: Optional[Callable[[float], float]]) -> float",
    "brief_usage": "Compute the effective opacity from Φ. Self-shielding Φ."
  },
  {
    "file_path": "marsdisk/physics/shielding.py",
    "line_no": 123,
    "symbol": "sigma_tau1",
    "signature": "sigma_tau1(kappa_eff: float) -> float",
    "brief_usage": "Return Σ_{τ=1} derived from κ_eff. Self-shielding Φ."
  },
  {
    "file_path": "marsdisk/physics/shielding.py",
    "line_no": 133,
    "symbol": "apply_shielding",
    "signature": "apply_shielding(kappa_surf: float, tau: float, w0: float, g: float, interp: type_Phi | None=None) -> Tuple[float, float]",
    "brief_usage": "Return effective opacity and ``Σ_{τ=1}`` for given conditions. Self-shielding Φ."
  },
  {
    "file_path": "marsdisk/physics/shielding.py",
    "line_no": 219,
    "symbol": "clip_to_tau1",
    "signature": "clip_to_tau1(sigma_surf: float, kappa_eff: float) -> float",
    "brief_usage": "Clip ``Σ_surf`` so that it does not exceed ``Σ_{τ=1}``. Self-shielding Φ."
  },
  {
    "file_path": "marsdisk/physics/sinks.py",
    "line_no": 35,
    "symbol": "SinkOptions",
    "signature": "class SinkOptions",
    "brief_usage": "Configuration switches for sink processes."
  },
  {
    "file_path": "marsdisk/physics/sinks.py",
    "line_no": 49,
    "symbol": "SinkTimescaleResult",
    "signature": "class SinkTimescaleResult",
    "brief_usage": "Return value capturing the combined sink diagnostics."
  },
  {
    "file_path": "marsdisk/physics/sinks.py",
    "line_no": 70,
    "symbol": "gas_drag_timescale",
    "signature": "gas_drag_timescale(s: float, rho_p: float, rho_g: float, c_s: float=500.0) -> float",
    "brief_usage": "Return an order-of-magnitude gas drag stopping time-scale."
  },
  {
    "file_path": "marsdisk/physics/sinks.py",
    "line_no": 83,
    "symbol": "total_sink_timescale",
    "signature": "total_sink_timescale(T_use: float, rho_p: float, Omega: float, opts: SinkOptions, *, s_ref: float=1e-06) -> SinkTimescaleResult",
    "brief_usage": "Return the combined sink time-scale."
  },
  {
    "file_path": "marsdisk/physics/sizes.py",
    "line_no": 10,
    "symbol": "eval_ds_dt_sublimation",
    "signature": "eval_ds_dt_sublimation(T: float, rho_bulk: float, params: sublimation.SublimationParams) -> float",
    "brief_usage": "Return ``ds/dt`` (m/s) for sublimation-driven erosion of a grain."
  },
  {
    "file_path": "marsdisk/physics/smol.py",
    "line_no": 18,
    "symbol": "step_imex_bdf1_C3",
    "signature": "step_imex_bdf1_C3(N: Iterable[float], C: np.ndarray, Y: np.ndarray, S: Iterable[float], m: Iterable[float], prod_subblow_mass_rate: float, dt: float, *, mass_tol: float=0.005, safety: float=0.1) -> tuple[np.ndarray, float, float]",
    "brief_usage": "Advance the Smoluchowski system by one time step."
  },
  {
    "file_path": "marsdisk/physics/smol.py",
    "line_no": 104,
    "symbol": "compute_mass_budget_error_C4",
    "signature": "compute_mass_budget_error_C4(N_old: Iterable[float], N_new: Iterable[float], m: Iterable[float], prod_subblow_mass_rate: float, dt: float) -> float",
    "brief_usage": "Return the relative mass budget error according to (C4)."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 37,
    "symbol": "PSAT_TABLE_BUFFER_DEFAULT_K",
    "signature": "PSAT_TABLE_BUFFER_DEFAULT_K = 75.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 38,
    "symbol": "PSAT_LOCAL_FIT_WINDOW_DEFAULT_K",
    "signature": "PSAT_LOCAL_FIT_WINDOW_DEFAULT_K = 300.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 39,
    "symbol": "PSAT_LOCAL_FIT_MIN_POINTS",
    "signature": "PSAT_LOCAL_FIT_MIN_POINTS = 3",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 40,
    "symbol": "PSAT_VALIDITY_WARNING_MARGIN_K",
    "signature": "PSAT_VALIDITY_WARNING_MARGIN_K = 200.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 43,
    "symbol": "PsatSelection",
    "signature": "class PsatSelection(NamedTuple)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 50,
    "symbol": "SublimationParams",
    "signature": "class SublimationParams",
    "brief_usage": "Parameters governing sublimation calculations."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 124,
    "symbol": "grain_temperature_graybody",
    "signature": "grain_temperature_graybody(T_M: float, radius_m: float) -> float",
    "brief_usage": "Return the grey-body grain temperature ``T_d`` (K)."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 138,
    "symbol": "_is_hkl_active",
    "signature": "_is_hkl_active(params: SublimationParams) -> bool",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 154,
    "symbol": "p_sat_clausius",
    "signature": "p_sat_clausius(T: float, params: SublimationParams) -> float",
    "brief_usage": "Return the saturation vapour pressure ``P_sat`` in Pascals."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 167,
    "symbol": "_load_psat_table",
    "signature": "_load_psat_table(params: SublimationParams) -> Callable[[float], float]",
    "brief_usage": "Return an interpolator for log10 P_sat based on a tabulated dataset."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 230,
    "symbol": "_get_table_info",
    "signature": "_get_table_info(params: SublimationParams, *, raise_on_error: bool) -> Optional[Dict[str, Any]]",
    "brief_usage": "Return cached table information, optionally raising on load failures."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 269,
    "symbol": "_local_clausius_fit_selection",
    "signature": "_local_clausius_fit_selection(T_req: float, params: SublimationParams, table_info: Dict[str, Any]) -> Optional[PsatSelection]",
    "brief_usage": "Return a local Clausius fit selection when sufficient table data exist."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 337,
    "symbol": "_baseline_clausius_selection",
    "signature": "_baseline_clausius_selection(params: SublimationParams, reason: str, *, model_name: str='clausius(baseline)') -> PsatSelection",
    "brief_usage": "Return a baseline Clausius selection using the configured coefficients."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 369,
    "symbol": "p_sat_tabulated",
    "signature": "p_sat_tabulated(T: float, params: SublimationParams) -> float",
    "brief_usage": "Return ``P_sat`` (Pa) from a tabulated :math:`\\log_{10} P` dataset."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 386,
    "symbol": "choose_psat_backend",
    "signature": "choose_psat_backend(T_req: float, params: SublimationParams, table_meta: Optional[Dict[str, Any]]=None) -> PsatSelection",
    "brief_usage": "Resolve the saturation pressure backend according to configuration and data."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 497,
    "symbol": "_store_psat_selection",
    "signature": "_store_psat_selection(params: SublimationParams, selection: PsatSelection, T_req: float, P_value: float) -> None",
    "brief_usage": "Persist selection metadata on ``params`` for provenance."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 525,
    "symbol": "p_sat",
    "signature": "p_sat(T: float, params: SublimationParams) -> float",
    "brief_usage": "Return the saturation vapour pressure according to the selected model."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 534,
    "symbol": "mass_flux_hkl",
    "signature": "mass_flux_hkl(T: float, params: SublimationParams) -> float",
    "brief_usage": "Return the sublimation mass flux ``J(T)`` in kg m^-2 s^-1."
  },
  {
    "file_path": "marsdisk/physics/sublimation.py",
    "line_no": 587,
    "symbol": "s_sink_from_timescale",
    "signature": "s_sink_from_timescale(T: float, rho: float, t_ref: float, params: SublimationParams) -> float",
    "brief_usage": "Return the instantaneous-sink size :math:`s_{\\rm sink}`."
  },
  {
    "file_path": "marsdisk/physics/supply.py",
    "line_no": 21,
    "symbol": "_EPS",
    "signature": "_EPS = 1e-12",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/supply.py",
    "line_no": 25,
    "symbol": "_TableData",
    "signature": "class _TableData",
    "brief_usage": "Holder for time/radius grids and associated rates."
  },
  {
    "file_path": "marsdisk/physics/supply.py",
    "line_no": 66,
    "symbol": "_TABLE_CACHE",
    "signature": "_TABLE_CACHE: Dict[Path, _TableData] = {}",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/supply.py",
    "line_no": 69,
    "symbol": "_rate_basic",
    "signature": "_rate_basic(t: float, r: float, spec: Supply | SupplyPiece) -> float",
    "brief_usage": "Function definition"
  },
  {
    "file_path": "marsdisk/physics/supply.py",
    "line_no": 93,
    "symbol": "get_prod_area_rate",
    "signature": "get_prod_area_rate(t: float, r: float, spec: Supply) -> float",
    "brief_usage": "Return the mixed surface production rate in kg m⁻² s⁻¹."
  },
  {
    "file_path": "marsdisk/physics/surface.py",
    "line_no": 41,
    "symbol": "TAU_MIN",
    "signature": "TAU_MIN = 1e-12",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/physics/surface.py",
    "line_no": 44,
    "symbol": "_safe_tcoll",
    "signature": "_safe_tcoll(Omega: float, tau: float | None) -> float | None",
    "brief_usage": "Return ``t_coll`` or ``None`` when ``tau`` is effectively zero."
  },
  {
    "file_path": "marsdisk/physics/surface.py",
    "line_no": 62,
    "symbol": "wyatt_tcoll_S1",
    "signature": "wyatt_tcoll_S1(tau: float, Omega: float) -> float",
    "brief_usage": "Return the Wyatt (2008) collisional time-scale for the surface layer."
  },
  {
    "file_path": "marsdisk/physics/surface.py",
    "line_no": 77,
    "symbol": "SurfaceStepResult",
    "signature": "class SurfaceStepResult",
    "brief_usage": "Container returned by :func:`step_surface_density_S1`."
  },
  {
    "file_path": "marsdisk/physics/surface.py",
    "line_no": 96,
    "symbol": "step_surface_density_S1",
    "signature": "step_surface_density_S1(sigma_surf: float, prod_subblow_area_rate: float, dt: float, Omega: float, *, t_coll: float | None=None, t_sink: float | None=None, sigma_tau1: float | None=None, enable_blowout: bool=True) -> SurfaceStepResult",
    "brief_usage": "Advance the surface density by one implicit Euler step (S1)."
  },
  {
    "file_path": "marsdisk/physics/surface.py",
    "line_no": 173,
    "symbol": "compute_surface_outflux",
    "signature": "compute_surface_outflux(sigma_surf: float, Omega: float) -> float",
    "brief_usage": "Return the instantaneous outflux ``Σ_surf Ω``."
  },
  {
    "file_path": "marsdisk/physics/surface.py",
    "line_no": 185,
    "symbol": "step_surface",
    "signature": "step_surface(sigma_surf: float, prod_subblow_area_rate: float, dt: float, Omega: float, *, tau: float | None=None, t_coll: float | None=None, t_sink: float | None=None, sigma_tau1: float | None=None, enable_blowout: bool=True) -> SurfaceStepResult",
    "brief_usage": "Alias for :func:`step_surface_density_S1` with optional Wyatt coupling."
  },
  {
    "file_path": "marsdisk/physics/viscosity.py",
    "line_no": 18,
    "symbol": "_solve_tridiagonal",
    "signature": "_solve_tridiagonal(a: np.ndarray, b: np.ndarray, c: np.ndarray, d: np.ndarray) -> np.ndarray",
    "brief_usage": "Solve a tridiagonal system using the Thomas algorithm."
  },
  {
    "file_path": "marsdisk/physics/viscosity.py",
    "line_no": 51,
    "symbol": "step_viscous_diffusion_C5",
    "signature": "step_viscous_diffusion_C5(sigma: Iterable[float], nu: Iterable[float], grid: RadialGrid, dt: float, *, theta: float=0.5) -> np.ndarray",
    "brief_usage": "Advance ``sigma`` by radial viscous diffusion."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 52,
    "symbol": "SECONDS_PER_YEAR",
    "signature": "SECONDS_PER_YEAR = 365.25 * 24 * 3600.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 53,
    "symbol": "MAX_STEPS",
    "signature": "MAX_STEPS = 5000",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 54,
    "symbol": "TAU_MIN",
    "signature": "TAU_MIN = 1e-12",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 55,
    "symbol": "KAPPA_MIN",
    "signature": "KAPPA_MIN = 1e-12",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 56,
    "symbol": "DEFAULT_SEED",
    "signature": "DEFAULT_SEED = 12345",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 57,
    "symbol": "MASS_BUDGET_TOLERANCE_PERCENT",
    "signature": "MASS_BUDGET_TOLERANCE_PERCENT = 0.5",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 58,
    "symbol": "SINK_REF_SIZE",
    "signature": "SINK_REF_SIZE = 1e-06",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 59,
    "symbol": "FAST_BLOWOUT_RATIO_THRESHOLD",
    "signature": "FAST_BLOWOUT_RATIO_THRESHOLD = 3.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 60,
    "symbol": "FAST_BLOWOUT_RATIO_STRICT",
    "signature": "FAST_BLOWOUT_RATIO_STRICT = 10.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 63,
    "symbol": "_parse_override_value",
    "signature": "_parse_override_value(raw: str) -> Any",
    "brief_usage": "Return a Python value parsed from a CLI override string."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 90,
    "symbol": "_apply_overrides_dict",
    "signature": "_apply_overrides_dict(payload: Dict[str, Any], overrides: Sequence[str]) -> Dict[str, Any]",
    "brief_usage": "Apply dotted-path overrides to a configuration dictionary."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 128,
    "symbol": "_resolve_temperature",
    "signature": "_resolve_temperature(cfg: Config) -> tuple[float, str]",
    "brief_usage": "Return the Mars-facing temperature used for radiation calculations."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 136,
    "symbol": "_safe_float",
    "signature": "_safe_float(value: Any) -> Optional[float]",
    "brief_usage": "Return ``value`` cast to float when finite, otherwise ``None``."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 148,
    "symbol": "_derive_seed_components",
    "signature": "_derive_seed_components(cfg: Config) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 160,
    "symbol": "_resolve_seed",
    "signature": "_resolve_seed(cfg: Config) -> tuple[int, str, str]",
    "brief_usage": "Return the RNG seed, seed expression description, and basis."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 175,
    "symbol": "_auto_chi_blow",
    "signature": "_auto_chi_blow(beta: float, qpr: float) -> float",
    "brief_usage": "Return an automatic chi_blow scaling based on β and ⟨Q_pr⟩."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 190,
    "symbol": "_fast_blowout_correction_factor",
    "signature": "_fast_blowout_correction_factor(ratio: float) -> float",
    "brief_usage": "Return the effective loss fraction ``f_fast = 1 - exp(-Δt/t_blow)``."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 210,
    "symbol": "_resolve_time_grid",
    "signature": "_resolve_time_grid(numerics: Any, Omega: float, t_orb: float) -> tuple[float, float, float, int, Dict[str, Any]]",
    "brief_usage": "Return (t_end, dt_nominal, dt_step, n_steps, info) for the integrator."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 280,
    "symbol": "RunConfig",
    "signature": "class RunConfig",
    "brief_usage": "Configuration parameters for a zero-dimensional run."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 294,
    "symbol": "RunState",
    "signature": "class RunState",
    "brief_usage": "State variables evolved during the run."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 303,
    "symbol": "step",
    "signature": "step(config: RunConfig, state: RunState, dt: float) -> Dict[str, float]",
    "brief_usage": "Advance the coupled S0/S1 system by one time-step."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 346,
    "symbol": "run_n_steps",
    "signature": "run_n_steps(config: RunConfig, state: RunState, n: int, dt: float, out_dir: Path | None=None) -> pd.DataFrame",
    "brief_usage": "Run ``n`` steps and optionally serialise results."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 372,
    "symbol": "load_config",
    "signature": "load_config(path: Path, overrides: Optional[Sequence[str]]=None) -> Config",
    "brief_usage": "Load a YAML configuration file into a :class:`Config` instance."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 395,
    "symbol": "_gather_git_info",
    "signature": "_gather_git_info() -> Dict[str, Any]",
    "brief_usage": "Return basic git metadata for provenance recording."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 422,
    "symbol": "MassBudgetViolationError",
    "signature": "class MassBudgetViolationError(RuntimeError)",
    "brief_usage": "Raised when the mass budget tolerance is exceeded."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 426,
    "symbol": "run_zero_d",
    "signature": "run_zero_d(cfg: Config, *, enforce_mass_budget: bool=False) -> None",
    "brief_usage": "Execute a simple zero-dimensional simulation."
  },
  {
    "file_path": "marsdisk/run.py",
    "line_no": 1619,
    "symbol": "main",
    "signature": "main(argv: Optional[List[str]]=None) -> None",
    "brief_usage": "Command line entry point."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 20,
    "symbol": "Geometry",
    "signature": "class Geometry(BaseModel)",
    "brief_usage": "Geometric configuration of the simulation domain."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 34,
    "symbol": "DiskGeometry",
    "signature": "class DiskGeometry(BaseModel)",
    "brief_usage": "Geometry of the inner disk in units of Mars radii."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 43,
    "symbol": "Disk",
    "signature": "class Disk(BaseModel)",
    "brief_usage": "Container for inner disk properties."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 49,
    "symbol": "InnerDiskMass",
    "signature": "class InnerDiskMass(BaseModel)",
    "brief_usage": "Scaling for the total mass of the inner disk."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 57,
    "symbol": "SupplyConst",
    "signature": "class SupplyConst(BaseModel)",
    "brief_usage": "Class definition"
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 61,
    "symbol": "SupplyPowerLaw",
    "signature": "class SupplyPowerLaw(BaseModel)",
    "brief_usage": "Class definition"
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 67,
    "symbol": "SupplyTable",
    "signature": "class SupplyTable(BaseModel)",
    "brief_usage": "Class definition"
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 72,
    "symbol": "SupplyMixing",
    "signature": "class SupplyMixing(BaseModel)",
    "brief_usage": "Class definition"
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 76,
    "symbol": "SupplyPiece",
    "signature": "class SupplyPiece(BaseModel)",
    "brief_usage": "Class definition"
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 85,
    "symbol": "Supply",
    "signature": "class Supply(BaseModel)",
    "brief_usage": "Parameterisation of external surface supply."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 96,
    "symbol": "Material",
    "signature": "class Material(BaseModel)",
    "brief_usage": "Material properties of the solids."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 111,
    "symbol": "Temps",
    "signature": "class Temps(BaseModel)",
    "brief_usage": "Thermal parameters."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 130,
    "symbol": "Sizes",
    "signature": "class Sizes(BaseModel)",
    "brief_usage": "Particle size grid specification."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 154,
    "symbol": "Initial",
    "signature": "class Initial(BaseModel)",
    "brief_usage": "Initial mass and PSD mode."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 161,
    "symbol": "Dynamics",
    "signature": "class Dynamics(BaseModel)",
    "brief_usage": "Parameters governing dynamical excitation."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 202,
    "symbol": "QStar",
    "signature": "class QStar(BaseModel)",
    "brief_usage": "Strength law parameters for catastrophic disruption."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 212,
    "symbol": "PSD",
    "signature": "class PSD(BaseModel)",
    "brief_usage": "Particle size distribution parameters."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 223,
    "symbol": "Surface",
    "signature": "class Surface(BaseModel)",
    "brief_usage": "Surface layer evolution parameters."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 232,
    "symbol": "SublimationParamsModel",
    "signature": "class SublimationParamsModel(BaseModel)",
    "brief_usage": "Nested parameters for sublimation models."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 251,
    "symbol": "Sinks",
    "signature": "class Sinks(BaseModel)",
    "brief_usage": "Configuration of additional sink processes."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 269,
    "symbol": "Radiation",
    "signature": "class Radiation(BaseModel)",
    "brief_usage": "Radiation pressure options and table paths."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 323,
    "symbol": "Shielding",
    "signature": "class Shielding(BaseModel)",
    "brief_usage": "Self-shielding table configuration."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 338,
    "symbol": "Blowout",
    "signature": "class Blowout(BaseModel)",
    "brief_usage": "Radiation blow-out control."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 344,
    "symbol": "Numerics",
    "signature": "class Numerics(BaseModel)",
    "brief_usage": "Integrator control parameters."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 434,
    "symbol": "IO",
    "signature": "class IO(BaseModel)",
    "brief_usage": "Output directories."
  },
  {
    "file_path": "marsdisk/schema.py",
    "line_no": 458,
    "symbol": "Config",
    "signature": "class Config(BaseModel)",
    "brief_usage": "Top-level configuration object."
  },
  {
    "file_path": "marsdisk/tests/test_core.py",
    "line_no": 11,
    "symbol": "test_constants_values",
    "signature": "test_constants_values()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_core.py",
    "line_no": 17,
    "symbol": "test_grid_relations",
    "signature": "test_grid_relations()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_core.py",
    "line_no": 24,
    "symbol": "test_writer_and_tables",
    "signature": "test_writer_and_tables(tmp_path: Path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_dynamics.py",
    "line_no": 4,
    "symbol": "const_eps",
    "signature": "const_eps(v: float) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_dynamics.py",
    "line_no": 8,
    "symbol": "test_v_ij_zero_limit",
    "signature": "test_v_ij_zero_limit()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_dynamics.py",
    "line_no": 13,
    "symbol": "test_c_eq_monotonic_tau_fwake",
    "signature": "test_c_eq_monotonic_tau_fwake()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_dynamics.py",
    "line_no": 21,
    "symbol": "test_update_e_relaxation",
    "signature": "test_update_e_relaxation()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_dynamics_sampling.py",
    "line_no": 9,
    "symbol": "_make_config",
    "signature": "_make_config(outdir)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_dynamics_sampling.py",
    "line_no": 40,
    "symbol": "test_stochastic_ei_sampling",
    "signature": "test_stochastic_ei_sampling(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_radiation_shielding.py",
    "line_no": 9,
    "symbol": "test_blowout_radius_scales_with_temperature",
    "signature": "test_blowout_radius_scales_with_temperature()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_radiation_shielding.py",
    "line_no": 18,
    "symbol": "test_beta_inverse_size_scaling",
    "signature": "test_beta_inverse_size_scaling()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_radiation_shielding.py",
    "line_no": 28,
    "symbol": "test_beta_respects_qpr_override",
    "signature": "test_beta_respects_qpr_override()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_radiation_shielding.py",
    "line_no": 38,
    "symbol": "test_planck_mean_qpr_uses_table",
    "signature": "test_planck_mean_qpr_uses_table()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_radiation_shielding.py",
    "line_no": 46,
    "symbol": "test_clip_to_tau1_non_negative",
    "signature": "test_clip_to_tau1_non_negative()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_sublimation.py",
    "line_no": 8,
    "symbol": "test_s_sink_from_timescale_logistic",
    "signature": "test_s_sink_from_timescale_logistic()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_sublimation.py",
    "line_no": 14,
    "symbol": "test_s_sub_boundary_fallback_warning",
    "signature": "test_s_sub_boundary_fallback_warning()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_sublimation.py",
    "line_no": 20,
    "symbol": "test_compute_s_min_F2_uses_max",
    "signature": "test_compute_s_min_F2_uses_max()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_surface_outflux.py",
    "line_no": 8,
    "symbol": "_run",
    "signature": "_run(prod_rate: float, Omega: float, Sigma_tau1: float, steps: int=200)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_surface_outflux.py",
    "line_no": 24,
    "symbol": "test_supply_limited_outflux",
    "signature": "test_supply_limited_outflux()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_surface_outflux.py",
    "line_no": 33,
    "symbol": "test_saturation_limited_outflux",
    "signature": "test_saturation_limited_outflux()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_surface_outflux.py",
    "line_no": 42,
    "symbol": "test_sink_increases_mass_loss",
    "signature": "test_sink_increases_mass_loss()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_timegrid_and_budget.py",
    "line_no": 13,
    "symbol": "_tiny_config",
    "signature": "_tiny_config(outdir: Path, dt_init: float, n_steps: int) -> schema.Config",
    "brief_usage": "Return a minimal 0D configuration for rapid implicit-Euler runs."
  },
  {
    "file_path": "marsdisk/tests/test_timegrid_and_budget.py",
    "line_no": 54,
    "symbol": "test_time_grid_and_mass_budget",
    "signature": "test_time_grid_and_mass_budget(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_viscosity.py",
    "line_no": 7,
    "symbol": "_run",
    "signature": "_run(N: int, dt: float)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_viscosity.py",
    "line_no": 18,
    "symbol": "test_viscous_diffusion_converges_and_conserves_mass",
    "signature": "test_viscous_diffusion_converges_and_conserves_mass()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "marsdisk/tests/test_wyatt_scaling.py",
    "line_no": 6,
    "symbol": "test_wyatt_scaling_inverse_tau",
    "signature": "test_wyatt_scaling_inverse_tau()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 31,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 36,
    "symbol": "DEFAULT_CONFIG",
    "signature": "DEFAULT_CONFIG = REPO_ROOT / 'configs' / 'base.yml'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 37,
    "symbol": "DEFAULT_OUTPUT_ROOT",
    "signature": "DEFAULT_OUTPUT_ROOT = REPO_ROOT / 'analysis' / 'radius_sweep'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 39,
    "symbol": "YAML_LOADER",
    "signature": "YAML_LOADER = YAML(typ='safe')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 40,
    "symbol": "YAML_DUMPER",
    "signature": "YAML_DUMPER = YAML()",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 44,
    "symbol": "parse_args",
    "signature": "parse_args(argv: Iterable[str] | None=None) -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 73,
    "symbol": "load_config",
    "signature": "load_config(path: Path) -> dict",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 81,
    "symbol": "write_config",
    "signature": "write_config(data: dict, path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 87,
    "symbol": "run_case",
    "signature": "run_case(config_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 92,
    "symbol": "collect_metrics",
    "signature": "collect_metrics(case_dir: Path) -> dict[str, float | str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/analyze_radius_trend.py",
    "line_no": 167,
    "symbol": "main",
    "signature": "main(argv: Iterable[str] | None=None) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/collect_series.py",
    "line_no": 13,
    "symbol": "_iter_series_paths",
    "signature": "_iter_series_paths(root: Path) -> Iterable[Path]",
    "brief_usage": "Yield Parquet files residing two levels below ``root``."
  },
  {
    "file_path": "scripts/collect_series.py",
    "line_no": 21,
    "symbol": "collect_series",
    "signature": "collect_series(roots: List[Path], out_path: Path) -> None",
    "brief_usage": "Aggregate series tables under ``roots`` and write a combined Parquet file."
  },
  {
    "file_path": "scripts/collect_series.py",
    "line_no": 39,
    "symbol": "_parse_args",
    "signature": "_parse_args() -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/collect_series.py",
    "line_no": 55,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "Entry point for the collect_series CLI."
  },
  {
    "file_path": "scripts/plot_axis_r_sweep.py",
    "line_no": 11,
    "symbol": "parse_args",
    "signature": "parse_args() -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/plot_axis_r_sweep.py",
    "line_no": 30,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 16,
    "symbol": "BLOWOUT_STATUS",
    "signature": "BLOWOUT_STATUS = 'blowout'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 17,
    "symbol": "DEFAULT_METRIC",
    "signature": "DEFAULT_METRIC = 'total_mass_lost_Mmars'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 18,
    "symbol": "BETA_METRIC_LABELS",
    "signature": "BETA_METRIC_LABELS = {'beta_at_smin': 'β(最小粒径)', 'beta_at_smin_config': 'β(設定最小粒径)', 'beta_at_smin_effective': 'β(有効最小粒径)'}",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 25,
    "symbol": "parse_args",
    "signature": "parse_args(argv: Sequence[str] | None=None) -> argparse.Namespace",
    "brief_usage": "コマンドライン引数を解釈する。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 46,
    "symbol": "ensure_directory",
    "signature": "ensure_directory(path: Path) -> None",
    "brief_usage": "ディレクトリが存在しなければ作成する。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 52,
    "symbol": "_normalise_map_key",
    "signature": "_normalise_map_key(map_arg: str) -> Tuple[str, str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 65,
    "symbol": "load_csv",
    "signature": "load_csv(map_stub: str) -> pd.DataFrame",
    "brief_usage": "指定マップIDのCSVを読み込む。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 86,
    "symbol": "format_tick_label",
    "signature": "format_tick_label(value: object) -> str",
    "brief_usage": "軸目盛のラベル文字列を生成する。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 96,
    "symbol": "prepare_pivot",
    "signature": "prepare_pivot(df: pd.DataFrame, metric: str) -> Tuple[pd.DataFrame, pd.DataFrame | None, List[object], List[object], str, str]",
    "brief_usage": "ピボットテーブルと軸ラベル情報を組み立てる。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 152,
    "symbol": "compute_log_values",
    "signature": "compute_log_values(pivot: pd.DataFrame) -> Tuple[np.ndarray, np.ndarray, float, float]",
    "brief_usage": "元の値と log10 値 (マスク付き) を計算する。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 168,
    "symbol": "plot_heatmap",
    "signature": "plot_heatmap(map_label: str, metric: str, pivot: pd.DataFrame, failure_pivot: pd.DataFrame | None, x_values: List[object], y_values: List[object], x_label: str, y_label: str, output_path: Path) -> Tuple[float, float]",
    "brief_usage": "ヒートマップを描画して保存する。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 277,
    "symbol": "sanitize_metric_name",
    "signature": "sanitize_metric_name(metric: str) -> str",
    "brief_usage": "ファイル名に使いやすいメトリクス名へ変換する。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 283,
    "symbol": "metric_axis_label",
    "signature": "metric_axis_label(metric: str) -> str",
    "brief_usage": "カラー軸などに用いる表示名を返す。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 291,
    "symbol": "maybe_plot_mass_per_r2_scatter",
    "signature": "maybe_plot_mass_per_r2_scatter(df: pd.DataFrame, map_stub: str, map_label: str) -> None",
    "brief_usage": "Map-1 系列向けの M/r^2 散布図を保存する。"
  },
  {
    "file_path": "scripts/plot_heatmaps.py",
    "line_no": 349,
    "symbol": "main",
    "signature": "main(argv: Iterable[str] | None=None) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 29,
    "symbol": "R_MARS",
    "signature": "R_MARS = 3389500.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 30,
    "symbol": "OUTPUT_ROOT",
    "signature": "OUTPUT_ROOT = Path('analysis/agent_runs/AXIS_r_sweep')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 31,
    "symbol": "CONFIG_DIR",
    "signature": "CONFIG_DIR = OUTPUT_ROOT / 'configs'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 32,
    "symbol": "REQUIRED_FILES",
    "signature": "REQUIRED_FILES = [Path('series/run.parquet'), Path('summary.json'), Path('run_config.json')]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 39,
    "symbol": "R_GRID_RM",
    "signature": "R_GRID_RM = [1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 40,
    "symbol": "T_GRID_K",
    "signature": "T_GRID_K = [1800.0, 2000.0, 2200.0, 2400.0, 2600.0, 2800.0, 3000.0, 3200.0, 3400.0, 3600.0, 3800.0, 4000.0, 4200.0, 4400.0, 4600.0, 4800.0, 5000.0, 5200.0, 5400.0, 5600.0, 5800.0, 6000.0]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 64,
    "symbol": "M_GRID_MM",
    "signature": "M_GRID_MM = [3e-05, 2e-05, 1e-05]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 68,
    "symbol": "CaseResult",
    "signature": "class CaseResult",
    "brief_usage": "Container for per-case run diagnostics."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 97,
    "symbol": "format_r_rm",
    "signature": "format_r_rm(value: float) -> str",
    "brief_usage": "Return radius in units of R_M with two decimals."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 102,
    "symbol": "format_mass_tag",
    "signature": "format_mass_tag(value: float) -> str",
    "brief_usage": "Produce compact scientific notation for directory names."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 115,
    "symbol": "format_float",
    "signature": "format_float(value: float) -> str",
    "brief_usage": "Format floats for YAML fields using up to six significant digits."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 131,
    "symbol": "compute_seed",
    "signature": "compute_seed(r_m: float, temperature_k: float, mass_mmars: float) -> int",
    "brief_usage": "Derive a deterministic RNG seed from the parameter triple."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 138,
    "symbol": "render_config_yaml",
    "signature": "render_config_yaml(*, r_m: float, temperature_k: float, mass_mmars: float, outdir: Path, seed: int) -> str",
    "brief_usage": "Materialise the YAML template with units annotated via inline comments."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 216,
    "symbol": "ensure_directories",
    "signature": "ensure_directories() -> None",
    "brief_usage": "Create output directories if they do not already exist."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 223,
    "symbol": "build_cases",
    "signature": "build_cases(root: Path) -> List[CaseResult]",
    "brief_usage": "Construct CaseResult objects for all sweep combinations."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 252,
    "symbol": "write_configs",
    "signature": "write_configs(cases: Iterable[CaseResult], root: Path) -> None",
    "brief_usage": "Write configuration YAML files for each case."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 267,
    "symbol": "run_case",
    "signature": "run_case(case: CaseResult, root: Path) -> None",
    "brief_usage": "Execute marsdisk.run for the provided case."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 286,
    "symbol": "collect_outputs",
    "signature": "collect_outputs(case: CaseResult) -> None",
    "brief_usage": "Populate summary and run_config information for an executed case."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 309,
    "symbol": "write_summary_csv",
    "signature": "write_summary_csv(cases: Iterable[CaseResult], output_path: Path) -> None",
    "brief_usage": "Aggregate summary metrics into a CSV file as specified in step 5."
  },
  {
    "file_path": "scripts/run_axis_r_sweep.py",
    "line_no": 362,
    "symbol": "main",
    "signature": "main(argv: Optional[List[str]]=None) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_beta_map.py",
    "line_no": 20,
    "symbol": "ROOT",
    "signature": "ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_beta_map.py",
    "line_no": 30,
    "symbol": "_parse_grid",
    "signature": "_parse_grid(start: float, stop: float, count: int, label: str) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_beta_map.py",
    "line_no": 39,
    "symbol": "_load_config",
    "signature": "_load_config(path: Path) -> Config",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_beta_map.py",
    "line_no": 50,
    "symbol": "_write_json",
    "signature": "_write_json(path: Path, payload: dict) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_beta_map.py",
    "line_no": 56,
    "symbol": "_write_zarr_array",
    "signature": "_write_zarr_array(path: Path, data: np.ndarray, *, axes: Sequence[str]) -> None",
    "brief_usage": "Write a contiguous Zarr v2 array without extra dependencies."
  },
  {
    "file_path": "scripts/sweep_beta_map.py",
    "line_no": 82,
    "symbol": "parse_args",
    "signature": "parse_args() -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_beta_map.py",
    "line_no": 119,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 45,
    "symbol": "BLOWOUT_STATUS",
    "signature": "BLOWOUT_STATUS = 'blowout'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 46,
    "symbol": "DEFAULT_TOL_MASS_PER_R2",
    "signature": "DEFAULT_TOL_MASS_PER_R2 = 0.1",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 47,
    "symbol": "DEFAULT_BASE_CONFIG",
    "signature": "DEFAULT_BASE_CONFIG = Path('configs/map_sweep_base.yml')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 51,
    "symbol": "ParamSpec",
    "signature": "class ParamSpec",
    "brief_usage": "Definition of a sweep parameter axis."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 70,
    "symbol": "MapDefinition",
    "signature": "class MapDefinition",
    "brief_usage": "Container bundling the parameter axes for a sweep."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 81,
    "symbol": "VariantSpec",
    "signature": "class VariantSpec",
    "brief_usage": "Configuration overrides applied on top of the base map settings."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 90,
    "symbol": "CaseSpec",
    "signature": "class CaseSpec",
    "brief_usage": "Runtime information for a single sweep case."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 108,
    "symbol": "build_variant_grid",
    "signature": "build_variant_grid(*, s_min_values: Optional[List[Tuple[str, float, float]]]=None, chi_values: Optional[List[Tuple[str, float]]]=None, sink_values: Optional[List[Tuple[str, Dict[str, Any], str]]]=None) -> List[VariantSpec]",
    "brief_usage": "Return the set of parameter variant combinations for Map-1 sweeps."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 166,
    "symbol": "VARIANT_GRID",
    "signature": "VARIANT_GRID: List[VariantSpec] = build_variant_grid()",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 167,
    "symbol": "DEFAULT_VARIANT",
    "signature": "DEFAULT_VARIANT = VariantSpec(label='default', overrides={}, metadata={'variant_label': 'default'})",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 170,
    "symbol": "build_variant_grid_from_spec",
    "signature": "build_variant_grid_from_spec(spec: str) -> List[VariantSpec]",
    "brief_usage": "Parse a variant specification string and return the corresponding grid."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 246,
    "symbol": "parse_args",
    "signature": "parse_args(argv: Optional[Iterable[str]]=None) -> argparse.Namespace",
    "brief_usage": "Parse command line arguments."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 405,
    "symbol": "_float_grid",
    "signature": "_float_grid(start: float, stop: float, step: float) -> List[float]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 432,
    "symbol": "_normalise_map_key",
    "signature": "_normalise_map_key(map_arg: str) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 445,
    "symbol": "create_map_definition",
    "signature": "create_map_definition(map_arg: str, overrides: Optional[Dict[str, float]]=None) -> MapDefinition",
    "brief_usage": "Return the parameter definition for the requested map."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 553,
    "symbol": "format_param_value",
    "signature": "format_param_value(value: float) -> str",
    "brief_usage": "Generate a filesystem-friendly representation of a parameter value."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 569,
    "symbol": "build_case_id",
    "signature": "build_case_id(param_x: ParamSpec, x_value: float, param_y: ParamSpec, y_value: float) -> str",
    "brief_usage": "Construct a case identifier from parameter names and values."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 577,
    "symbol": "set_nested",
    "signature": "set_nested(data: Dict[str, Any], path: str, value: Any) -> None",
    "brief_usage": "Assign a value to a nested dictionary path."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 589,
    "symbol": "get_nested",
    "signature": "get_nested(data: Dict[str, Any], path: str) -> Any",
    "brief_usage": "Retrieve a nested value from a dictionary."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 604,
    "symbol": "ensure_directory",
    "signature": "ensure_directory(path: Path) -> None",
    "brief_usage": "Create a directory if it does not exist."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 610,
    "symbol": "partition_param_values",
    "signature": "partition_param_values(param: ParamSpec, num_parts: int) -> List[np.ndarray]",
    "brief_usage": "Return indices partitioning parameter values into ``num_parts`` segments."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 630,
    "symbol": "COMPLETION_FLAG_NAME",
    "signature": "COMPLETION_FLAG_NAME = 'case_completed.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 633,
    "symbol": "completion_flag_path",
    "signature": "completion_flag_path(case: CaseSpec) -> Path",
    "brief_usage": "Return the path to the completion flag for a case."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 639,
    "symbol": "mark_case_complete",
    "signature": "mark_case_complete(case: CaseSpec, summary_path: Path, series_path: Path) -> None",
    "brief_usage": "Persist a completion marker allowing interrupted sweeps to resume."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 656,
    "symbol": "case_is_completed",
    "signature": "case_is_completed(case: CaseSpec) -> bool",
    "brief_usage": "Return ``True`` if the completion flag and summary file are present."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 664,
    "symbol": "load_base_config",
    "signature": "load_base_config(base_path: Path) -> Dict[str, Any]",
    "brief_usage": "Load the base YAML configuration using ruamel.yaml."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 677,
    "symbol": "write_config",
    "signature": "write_config(config: Dict[str, Any], path: Path) -> None",
    "brief_usage": "Serialize a configuration dictionary to YAML."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 686,
    "symbol": "build_cases",
    "signature": "build_cases(map_def: MapDefinition, out_root: Path, y_index_filter: Optional[Iterable[int]]=None, *, partition_index: int=1, partition_count: int=1, variants: Optional[List[VariantSpec]]=None) -> List[CaseSpec]",
    "brief_usage": "Prepare the full list of cases for the sweep."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 742,
    "symbol": "compute_area_from_config",
    "signature": "compute_area_from_config(config: Dict[str, Any]) -> Optional[float]",
    "brief_usage": "Compute the surface area associated with a configuration."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 768,
    "symbol": "search_numeric_value",
    "signature": "search_numeric_value(data: Any, key_pred: Callable[[str], bool]) -> Optional[float]",
    "brief_usage": "Recursively search for a numeric value whose key matches a predicate."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 786,
    "symbol": "parse_summary",
    "signature": "parse_summary(summary_path: Path) -> Tuple[Optional[float], Optional[float], Optional[Dict[str, Any]]]",
    "brief_usage": "Load the summary JSON and extract loss/s_min related values."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 815,
    "symbol": "_get_beta_for_checks",
    "signature": "_get_beta_for_checks(summary: Optional[Dict[str, Any]]) -> float",
    "brief_usage": "Return the beta value relevant for validation thresholds."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 826,
    "symbol": "extract_smin_from_series",
    "signature": "extract_smin_from_series(df: pd.DataFrame) -> Optional[float]",
    "brief_usage": "Pick an effective s_min column from a time series DataFrame."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 849,
    "symbol": "_build_time_array",
    "signature": "_build_time_array(df: pd.DataFrame) -> Optional[np.ndarray]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 860,
    "symbol": "integrate_outflux",
    "signature": "integrate_outflux(df: pd.DataFrame, config: Dict[str, Any], case_id: str) -> Tuple[float, Optional[str]]",
    "brief_usage": "Integrate an outflux-like column to obtain total mass loss."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 908,
    "symbol": "_to_float",
    "signature": "_to_float(value: Any) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 917,
    "symbol": "validate_map1_results",
    "signature": "validate_map1_results(df: pd.DataFrame, tolerance: float=DEFAULT_TOL_MASS_PER_R2) -> Dict[str, Any]",
    "brief_usage": "Validate Map‑1 style results for low-T failures and r^2 scaling."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 1029,
    "symbol": "populate_record_from_outputs",
    "signature": "populate_record_from_outputs(record: Dict[str, Any], case: CaseSpec, config_data: Dict[str, Any]) -> Optional[str]",
    "brief_usage": "Fill bookkeeping fields by reading prior outputs."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 1143,
    "symbol": "run_case",
    "signature": "run_case(case: CaseSpec, base_config: Dict[str, Any], root_dir: Path, python_executable: str, qpr_table_path: Optional[str]=None) -> Dict[str, Any]",
    "brief_usage": "Execute a single sweep case and collect results."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 1252,
    "symbol": "_results_dataframe",
    "signature": "_results_dataframe(results: List[Dict[str, Any]]) -> pd.DataFrame",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_heatmaps.py",
    "line_no": 1261,
    "symbol": "main",
    "signature": "main(argv: Optional[Iterable[str]]=None) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 29,
    "symbol": "ROOT",
    "signature": "ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 35,
    "symbol": "DEFAULT_BASE_CONFIG",
    "signature": "DEFAULT_BASE_CONFIG = Path('_configs/05_massloss_base.yml')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 36,
    "symbol": "MAP_SUBDIR",
    "signature": "MAP_SUBDIR = 'map1'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 37,
    "symbol": "LOG_SUBDIR",
    "signature": "LOG_SUBDIR = 'logs'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 38,
    "symbol": "FRAMES_SUBDIR",
    "signature": "FRAMES_SUBDIR = 'frames'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 39,
    "symbol": "CASE_CONFIG_NAME",
    "signature": "CASE_CONFIG_NAME = 'run_config.yml'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 40,
    "symbol": "SUMMARY_FILENAME",
    "signature": "SUMMARY_FILENAME = 'summary.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 41,
    "symbol": "SERIES_FILENAME",
    "signature": "SERIES_FILENAME = 'series/run.parquet'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 42,
    "symbol": "MASS_BUDGET_FILENAME",
    "signature": "MASS_BUDGET_FILENAME = 'checks/mass_budget.csv'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 43,
    "symbol": "DT_OVER_T_BLOW_CAP",
    "signature": "DT_OVER_T_BLOW_CAP = 0.05",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 47,
    "symbol": "CaseSpec",
    "signature": "class CaseSpec",
    "brief_usage": "Container describing a single (r/R_M, T_M) evaluation."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 59,
    "symbol": "_parse_grid",
    "signature": "_parse_grid(spec: Sequence[float], label: str) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 73,
    "symbol": "_load_base_config",
    "signature": "_load_base_config(path: Path) -> Dict[str, Any]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 84,
    "symbol": "_write_yaml",
    "signature": "_write_yaml(path: Path, payload: Dict[str, Any]) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 91,
    "symbol": "_compute_dt_controls",
    "signature": "_compute_dt_controls(r_rm: float, steps_per_orbit: int, dt_ratio_cap: float) -> Tuple[float, int, float]",
    "brief_usage": "Return (dt_init, steps_estimate, Omega) for the given orbital radius."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 110,
    "symbol": "_case_identifier",
    "signature": "_case_identifier(r_rm: float, T_M: float) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 114,
    "symbol": "_prepare_case_spec",
    "signature": "_prepare_case_spec(r_rm: float, T_M: float, *, base_outdir: Path, logs_dir: Path, steps_per_orbit: int, dt_ratio_cap: float) -> CaseSpec",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 138,
    "symbol": "_inject_case_parameters",
    "signature": "_inject_case_parameters(base_cfg: Dict[str, Any], *, spec: CaseSpec, qpr_table: Path) -> Dict[str, Any]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 184,
    "symbol": "_read_summary",
    "signature": "_read_summary(path: Path) -> Dict[str, Any]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 191,
    "symbol": "_read_series",
    "signature": "_read_series(path: Path) -> pd.DataFrame",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 197,
    "symbol": "_read_mass_budget",
    "signature": "_read_mass_budget(path: Path) -> Dict[str, float]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 210,
    "symbol": "_median_ratio",
    "signature": "_median_ratio(numerator: pd.Series, denominator: pd.Series) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 223,
    "symbol": "_median_finite",
    "signature": "_median_finite(series: pd.Series) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 231,
    "symbol": "_run_case",
    "signature": "_run_case(spec: CaseSpec, *, base_cfg: Dict[str, Any], qpr_table: Path) -> Dict[str, Any]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 316,
    "symbol": "_iter_specs",
    "signature": "_iter_specs(r_values: Iterable[float], T_values: Iterable[float], *, base_outdir: Path, logs_dir: Path, steps_per_orbit: int, dt_ratio_cap: float) -> List[CaseSpec]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 341,
    "symbol": "_run_sequential",
    "signature": "_run_sequential(specs: Sequence[CaseSpec], *, base_cfg: Dict[str, Any], qpr_table: Path) -> List[Dict[str, Any]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 355,
    "symbol": "_run_parallel",
    "signature": "_run_parallel(specs: Sequence[CaseSpec], *, base_cfg: Dict[str, Any], qpr_table: Path, jobs: int) -> List[Dict[str, Any]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 386,
    "symbol": "_write_json",
    "signature": "_write_json(path: Path, payload: Dict[str, Any]) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 392,
    "symbol": "_collect_validation",
    "signature": "_collect_validation(records: Sequence[Dict[str, Any]], *, tolerance: float) -> Dict[str, Any]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 420,
    "symbol": "parse_args",
    "signature": "parse_args() -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "scripts/sweep_massloss_map.py",
    "line_no": 468,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_blowout_radius.py",
    "line_no": 13,
    "symbol": "test_blowout_radius_with_mars_pr",
    "signature": "test_blowout_radius_with_mars_pr()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_ci_guard_analysis.py",
    "line_no": 8,
    "symbol": "_write_coverage",
    "signature": "_write_coverage(tmp_path, **overrides)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_ci_guard_analysis.py",
    "line_no": 33,
    "symbol": "test_ci_guard_analysis_pass",
    "signature": "test_ci_guard_analysis_pass(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_ci_guard_analysis.py",
    "line_no": 41,
    "symbol": "test_ci_guard_analysis_anchor_failure",
    "signature": "test_ci_guard_analysis_anchor_failure(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_doc_sync_agent.py",
    "line_no": 9,
    "symbol": "test_scan_generates_inventory",
    "signature": "test_scan_generates_inventory(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_doc_sync_agent.py",
    "line_no": 26,
    "symbol": "test_refs_and_coverage_pipeline",
    "signature": "test_refs_and_coverage_pipeline(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_doc_sync_agent.py",
    "line_no": 74,
    "symbol": "test_autostub_inserts_stubs",
    "signature": "test_autostub_inserts_stubs(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_extended_map.py",
    "line_no": 20,
    "symbol": "R_MARS",
    "signature": "R_MARS = mod_map.R_MARS",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tests/test_extended_map.py",
    "line_no": 23,
    "symbol": "test_f_blow_map_shape",
    "signature": "test_f_blow_map_shape()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_extended_map.py",
    "line_no": 43,
    "symbol": "test_eta_loss",
    "signature": "test_eta_loss()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_fast_blowout.py",
    "line_no": 12,
    "symbol": "_build_fast_blowout_config",
    "signature": "_build_fast_blowout_config(outdir: Path, *, correct: bool, substep: bool=False, substep_ratio: float=1.0) -> schema.Config",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_fast_blowout.py",
    "line_no": 46,
    "symbol": "test_fast_blowout_factor_samples",
    "signature": "test_fast_blowout_factor_samples() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_fast_blowout.py",
    "line_no": 54,
    "symbol": "test_fast_blowout_disabled_matches_baseline",
    "signature": "test_fast_blowout_disabled_matches_baseline(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_fast_blowout.py",
    "line_no": 88,
    "symbol": "test_fast_blowout_toggle_scales_outflux",
    "signature": "test_fast_blowout_toggle_scales_outflux(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_fast_blowout.py",
    "line_no": 155,
    "symbol": "test_fast_blowout_substepping_matches_correction",
    "signature": "test_fast_blowout_substepping_matches_correction(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_fast_blowout.py",
    "line_no": 181,
    "symbol": "test_chi_blow_auto_range",
    "signature": "test_chi_blow_auto_range(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_make_qpr_table.py",
    "line_no": 7,
    "symbol": "test_small_grain_qpr_increases_with_temperature",
    "signature": "test_small_grain_qpr_increases_with_temperature()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_map1_validations.py",
    "line_no": 8,
    "symbol": "_load_sweep_module",
    "signature": "_load_sweep_module()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_map1_validations.py",
    "line_no": 18,
    "symbol": "SWEEP",
    "signature": "SWEEP = _load_sweep_module()",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tests/test_map1_validations.py",
    "line_no": 21,
    "symbol": "test_map1_definition_range",
    "signature": "test_map1_definition_range()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_map1_validations.py",
    "line_no": 33,
    "symbol": "test_map1b_definition_range",
    "signature": "test_map1b_definition_range()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_map1_validations.py",
    "line_no": 45,
    "symbol": "test_validate_map1_results_successful_case",
    "signature": "test_validate_map1_results_successful_case()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_map1_validations.py",
    "line_no": 80,
    "symbol": "test_validate_map1_results_detects_reentry",
    "signature": "test_validate_map1_results_detects_reentry()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_mars_pr.py",
    "line_no": 13,
    "symbol": "R_MARS",
    "signature": "R_MARS = mod.R_MARS",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tests/test_mars_pr.py",
    "line_no": 16,
    "symbol": "test_mars_pr_faster_than_sun",
    "signature": "test_mars_pr_faster_than_sun()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_mass_conservation.py",
    "line_no": 10,
    "symbol": "test_imex_bdf1_limits_timestep_and_preserves_mass",
    "signature": "test_imex_bdf1_limits_timestep_and_preserves_mass() -> None",
    "brief_usage": "The integrator should cap dt and keep the mass budget tight."
  },
  {
    "file_path": "tests/test_mass_flux_consistency.py",
    "line_no": 10,
    "symbol": "TOL_REL",
    "signature": "TOL_REL = 0.005",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tests/test_mass_flux_consistency.py",
    "line_no": 13,
    "symbol": "_build_config",
    "signature": "_build_config(outdir: Path, mode: str) -> schema.Config",
    "brief_usage": "Construct a configuration for the requested diagnostic mode."
  },
  {
    "file_path": "tests/test_mass_flux_consistency.py",
    "line_no": 67,
    "symbol": "test_mass_flux_integrates_to_cumulative_loss",
    "signature": "test_mass_flux_integrates_to_cumulative_loss(tmp_path: Path, mode: str) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_mass_fraction_blowout.py",
    "line_no": 14,
    "symbol": "test_mass_fraction_blowout",
    "signature": "test_mass_fraction_blowout()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_mass_tau.py",
    "line_no": 14,
    "symbol": "R_MARS",
    "signature": "R_MARS = mod.R_MARS",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tests/test_mass_tau.py",
    "line_no": 19,
    "symbol": "test_tau_scaling",
    "signature": "test_tau_scaling()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_mass_tau.py",
    "line_no": 25,
    "symbol": "test_mass_tau_script",
    "signature": "test_mass_tau_script(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_min_size_evolution_hook.py",
    "line_no": 9,
    "symbol": "_base_config",
    "signature": "_base_config(outdir: Path) -> schema.Config",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_min_size_evolution_hook.py",
    "line_no": 31,
    "symbol": "test_s_min_evolved_column_absent_when_disabled",
    "signature": "test_s_min_evolved_column_absent_when_disabled(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_min_size_evolution_hook.py",
    "line_no": 40,
    "symbol": "test_s_min_evolved_column_records_candidate_when_enabled",
    "signature": "test_s_min_evolved_column_records_candidate_when_enabled(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_min_size_evolution_hook.py",
    "line_no": 52,
    "symbol": "test_s_min_evolved_monotonic_with_linear_decay",
    "signature": "test_s_min_evolved_monotonic_with_linear_decay(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_modes_units.py",
    "line_no": 10,
    "symbol": "_base_config",
    "signature": "_base_config(outdir: Path) -> schema.Config",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_modes_units.py",
    "line_no": 47,
    "symbol": "test_mars_clearance_uses_meter_offsets",
    "signature": "test_mars_clearance_uses_meter_offsets(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_per_step_blowout.py",
    "line_no": 11,
    "symbol": "_build_config",
    "signature": "_build_config(outdir: Path, *, dt_init: float, eval_per_step: bool) -> schema.Config",
    "brief_usage": "Return a configuration tuned for the per-step blow-out regression tests."
  },
  {
    "file_path": "tests/test_per_step_blowout.py",
    "line_no": 46,
    "symbol": "_read_orbit_loss",
    "signature": "_read_orbit_loss(outdir: Path) -> pd.DataFrame",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_per_step_blowout.py",
    "line_no": 54,
    "symbol": "_max_mass_budget_error",
    "signature": "_max_mass_budget_error(outdir: Path) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_per_step_blowout.py",
    "line_no": 61,
    "symbol": "test_orbit_rollup_agrees_between_timesteps",
    "signature": "test_orbit_rollup_agrees_between_timesteps(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_per_step_blowout.py",
    "line_no": 86,
    "symbol": "test_eval_per_step_toggle_changes_loss",
    "signature": "test_eval_per_step_toggle_changes_loss(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_phi_table.py",
    "line_no": 12,
    "symbol": "mock_phi_table",
    "signature": "mock_phi_table(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_phi_table.py",
    "line_no": 24,
    "symbol": "test_phi_table_monotonic_effects",
    "signature": "test_phi_table_monotonic_effects(mock_phi_table)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_psd_kappa.py",
    "line_no": 9,
    "symbol": "test_kappa_decreases_with_smin",
    "signature": "test_kappa_decreases_with_smin() -> None",
    "brief_usage": "Opacity should decrease when the minimum size increases."
  },
  {
    "file_path": "tests/test_psd_kappa.py",
    "line_no": 22,
    "symbol": "test_wavy_correction_creates_oscillation",
    "signature": "test_wavy_correction_creates_oscillation() -> None",
    "brief_usage": "Non-zero ``wavy_strength`` should introduce oscillations in ``n``."
  },
  {
    "file_path": "tests/test_qpr_loader_h5datasets.py",
    "line_no": 18,
    "symbol": "_write_three_dataset",
    "signature": "_write_three_dataset(path, qpr, log10s, temperatures)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qpr_loader_h5datasets.py",
    "line_no": 28,
    "symbol": "test_load_qpr_table_from_h5datasets",
    "signature": "test_load_qpr_table_from_h5datasets(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qpr_loader_h5datasets.py",
    "line_no": 50,
    "symbol": "test_h5datasets_shape_mismatch",
    "signature": "test_h5datasets_shape_mismatch(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qpr_loader_h5datasets.py",
    "line_no": 61,
    "symbol": "test_h5datasets_requires_h5py",
    "signature": "test_h5datasets_requires_h5py(monkeypatch, tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qpr_lookup.py",
    "line_no": 12,
    "symbol": "mock_qpr_table",
    "signature": "mock_qpr_table(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qpr_lookup.py",
    "line_no": 34,
    "symbol": "test_qpr_lookup_interpolates_from_table",
    "signature": "test_qpr_lookup_interpolates_from_table(mock_qpr_table)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qpr_lookup.py",
    "line_no": 85,
    "symbol": "test_qpr_lookup_requires_table",
    "signature": "test_qpr_lookup_requires_table(mock_qpr_table)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qstar_fragments.py",
    "line_no": 11,
    "symbol": "test_qdstar_velocity_interpolation_monotonic",
    "signature": "test_qdstar_velocity_interpolation_monotonic()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qstar_fragments.py",
    "line_no": 20,
    "symbol": "test_largest_remnant_fraction_continuity",
    "signature": "test_largest_remnant_fraction_continuity()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_qstar_fragments.py",
    "line_no": 38,
    "symbol": "test_compute_s_min_bounds_and_monotonic",
    "signature": "test_compute_s_min_bounds_and_monotonic()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_radiation_shielding_logging.py",
    "line_no": 12,
    "symbol": "restore_qpr_lookup",
    "signature": "restore_qpr_lookup()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_radiation_shielding_logging.py",
    "line_no": 20,
    "symbol": "test_qpr_lookup_clamp_logs",
    "signature": "test_qpr_lookup_clamp_logs(tmp_path, caplog, restore_qpr_lookup)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_radiation_shielding_logging.py",
    "line_no": 44,
    "symbol": "test_beta_density_validation",
    "signature": "test_beta_density_validation()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_radiation_shielding_logging.py",
    "line_no": 52,
    "symbol": "test_blowout_radius_density_validation",
    "signature": "test_blowout_radius_density_validation()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_radiation_shielding_logging.py",
    "line_no": 58,
    "symbol": "test_load_phi_table_logs",
    "signature": "test_load_phi_table_logs(tmp_path, caplog)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_radiation_shielding_logging.py",
    "line_no": 70,
    "symbol": "test_apply_shielding_clamp_logs",
    "signature": "test_apply_shielding_clamp_logs(caplog)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_radiation_shielding_logging.py",
    "line_no": 91,
    "symbol": "test_effective_kappa_phi_clamp_logs",
    "signature": "test_effective_kappa_phi_clamp_logs(caplog)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_radiation_shielding_logging.py",
    "line_no": 101,
    "symbol": "test_clip_to_tau1_logging",
    "signature": "test_clip_to_tau1_logging(caplog)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_reproducibility.py",
    "line_no": 11,
    "symbol": "_config",
    "signature": "_config(outdir: Path) -> schema.Config",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_reproducibility.py",
    "line_no": 39,
    "symbol": "_run_once",
    "signature": "_run_once(outdir: Path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_reproducibility.py",
    "line_no": 49,
    "symbol": "test_repeated_runs_match",
    "signature": "test_repeated_runs_match(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_run_regressions.py",
    "line_no": 14,
    "symbol": "BASE_CONFIG",
    "signature": "BASE_CONFIG = Path('configs/base.yml')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tests/test_run_regressions.py",
    "line_no": 17,
    "symbol": "_run_case",
    "signature": "_run_case(overrides: list[str]) -> tuple[dict, pd.DataFrame]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_run_regressions.py",
    "line_no": 31,
    "symbol": "test_mass_budget_and_timestep_overrides",
    "signature": "test_mass_budget_and_timestep_overrides() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_run_regressions.py",
    "line_no": 59,
    "symbol": "test_sublimation_not_double_counted",
    "signature": "test_sublimation_not_double_counted() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_scalings.py",
    "line_no": 13,
    "symbol": "test_wyatt_collisional_timescale_matches_orbit_scaling",
    "signature": "test_wyatt_collisional_timescale_matches_orbit_scaling(tau: float) -> None",
    "brief_usage": "Wyatt (2008) scaling should match T_orb/(4π τ)."
  },
  {
    "file_path": "tests/test_sinks_none.py",
    "line_no": 15,
    "symbol": "test_run_zero_d_with_sinks_disabled",
    "signature": "test_run_zero_d_with_sinks_disabled(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sinks_tracing.py",
    "line_no": 9,
    "symbol": "_build_config",
    "signature": "_build_config(outdir: Path) -> schema.Config",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sinks_tracing.py",
    "line_no": 34,
    "symbol": "test_debug_sinks_trace_outputs_jsonl",
    "signature": "test_debug_sinks_trace_outputs_jsonl(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_hkl.py",
    "line_no": 15,
    "symbol": "_kepler_omega",
    "signature": "_kepler_omega(radius_m: float) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_hkl.py",
    "line_no": 19,
    "symbol": "_make_params",
    "signature": "_make_params(**overrides) -> SublimationParams",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_hkl.py",
    "line_no": 33,
    "symbol": "test_s_sub_increases_towards_planet",
    "signature": "test_s_sub_increases_towards_planet()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_hkl.py",
    "line_no": 69,
    "symbol": "test_s_sub_scales_with_alpha",
    "signature": "test_s_sub_scales_with_alpha()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_hkl.py",
    "line_no": 99,
    "symbol": "test_s_sink_matches_boundary_for_one_orbit",
    "signature": "test_s_sink_matches_boundary_for_one_orbit()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_hkl.py",
    "line_no": 120,
    "symbol": "test_total_sink_timescale_returns_none_when_flux_zero",
    "signature": "test_total_sink_timescale_returns_none_when_flux_zero()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_sio.py",
    "line_no": 17,
    "symbol": "sio_params",
    "signature": "sio_params() -> SublimationParams",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_sio.py",
    "line_no": 30,
    "symbol": "test_units_and_flux_dimension",
    "signature": "test_units_and_flux_dimension(sio_params: SublimationParams) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_sio.py",
    "line_no": 41,
    "symbol": "test_negative_pressure_gap_clamped",
    "signature": "test_negative_pressure_gap_clamped(sio_params: SublimationParams) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_sio.py",
    "line_no": 55,
    "symbol": "test_tabulated_psat_interp",
    "signature": "test_tabulated_psat_interp(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_sio.py",
    "line_no": 80,
    "symbol": "test_auto_prefers_tabulated_within_range",
    "signature": "test_auto_prefers_tabulated_within_range(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_sio.py",
    "line_no": 106,
    "symbol": "test_auto_switches_to_local_clausius_fit",
    "signature": "test_auto_switches_to_local_clausius_fit(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_sio.py",
    "line_no": 136,
    "symbol": "test_auto_baseline_warns_when_out_of_range",
    "signature": "test_auto_baseline_warns_when_out_of_range(caplog) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_sublimation_sio.py",
    "line_no": 155,
    "symbol": "test_run_config_records_psat_selection",
    "signature": "test_run_config_records_psat_selection(tmp_path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_summary_backcompat.py",
    "line_no": 9,
    "symbol": "_write_summary",
    "signature": "_write_summary(path: Path, payload: dict) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_summary_backcompat.py",
    "line_no": 13,
    "symbol": "test_parse_summary_backwards_compatibility",
    "signature": "test_parse_summary_backwards_compatibility(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_surface_outflux.py",
    "line_no": 10,
    "symbol": "test_blowout_driven_wavy_pattern_emerges",
    "signature": "test_blowout_driven_wavy_pattern_emerges() -> None",
    "brief_usage": "Efficient blow-out should imprint a wavy modulation near s_min."
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 16,
    "symbol": "test_const_mode",
    "signature": "test_const_mode()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 26,
    "symbol": "test_powerlaw_mode",
    "signature": "test_powerlaw_mode()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 35,
    "symbol": "test_table_mode",
    "signature": "test_table_mode(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 43,
    "symbol": "MASS_TOL",
    "signature": "MASS_TOL = 0.005",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 46,
    "symbol": "_surface_mass_budget_error",
    "signature": "_surface_mass_budget_error(sigma_prev: float, sigma_next: float, prod_rate: float, outflux: float, sink_flux: float, dt: float, Omega: float, *, t_coll: float | None=None, t_sink: float | None=None) -> float",
    "brief_usage": "Return the relative mass-budget error for a single surface step."
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 73,
    "symbol": "_run_surface",
    "signature": "_run_surface(cfg: Supply, *, Omega: float, sigma_tau1: float, dt: float, steps: int, sigma0: float=0.0) -> list[dict[str, float]]",
    "brief_usage": "Integrate the surface layer for a fixed supply specification."
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 119,
    "symbol": "test_surface_const_supply_loss_limited",
    "signature": "test_surface_const_supply_loss_limited()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 136,
    "symbol": "test_surface_no_supply_decay",
    "signature": "test_surface_no_supply_decay()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_surface_supply_param.py",
    "line_no": 160,
    "symbol": "test_surface_table_supply_tracks_changes",
    "signature": "test_surface_table_supply_tracks_changes(tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_temperature_selection.py",
    "line_no": 9,
    "symbol": "_make_config",
    "signature": "_make_config(outdir: Path, T_M: float) -> schema.Config",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_temperature_selection.py",
    "line_no": 26,
    "symbol": "_run_and_load",
    "signature": "_run_and_load(cfg: schema.Config) -> dict",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_temperature_selection.py",
    "line_no": 34,
    "symbol": "test_temperature_selection_prefers_radiation_override",
    "signature": "test_temperature_selection_prefers_radiation_override(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_temperature_selection.py",
    "line_no": 46,
    "symbol": "test_temperature_selection_tracks_temps_when_no_override",
    "signature": "test_temperature_selection_tracks_temps_when_no_override(tmp_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_units.py",
    "line_no": 12,
    "symbol": "R_MARS",
    "signature": "R_MARS = 3389500.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tests/test_units.py",
    "line_no": 15,
    "symbol": "test_collision_units",
    "signature": "test_collision_units()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_zero_division_guards.py",
    "line_no": 11,
    "symbol": "test_step_surface_tau_zero_no_error",
    "signature": "test_step_surface_tau_zero_no_error()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_zero_division_guards.py",
    "line_no": 22,
    "symbol": "test_sigma_tau1_zero_kappa",
    "signature": "test_sigma_tau1_zero_kappa(monkeypatch)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_zero_division_guards.py",
    "line_no": 33,
    "symbol": "test_supply_powerlaw_t0_zero",
    "signature": "test_supply_powerlaw_t0_zero()",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tests/test_zero_division_guards.py",
    "line_no": 42,
    "symbol": "test_run_zero_d_no_zerodivision",
    "signature": "test_run_zero_d_no_zerodivision(monkeypatch, tmp_path)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 42,
    "symbol": "ROOT_DIR",
    "signature": "ROOT_DIR = Path(__file__).resolve().parents[2]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 53,
    "symbol": "TAU_FLOOR",
    "signature": "TAU_FLOOR = 1e-12",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 54,
    "symbol": "REL_T_VARIANCE_THRESHOLD",
    "signature": "REL_T_VARIANCE_THRESHOLD = 0.01",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 57,
    "symbol": "QPrCounter",
    "signature": "class QPrCounter",
    "brief_usage": "Wrapper counting successful/failed Q_pr interpolations."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 75,
    "symbol": "BetaCellResult",
    "signature": "class BetaCellResult",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 90,
    "symbol": "RuntimeContext",
    "signature": "class RuntimeContext",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 114,
    "symbol": "parse_args",
    "signature": "parse_args() -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 179,
    "symbol": "setup_logger",
    "signature": "setup_logger(path: Path) -> logging.Logger",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 192,
    "symbol": "load_config",
    "signature": "load_config(path: Path) -> Config",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 201,
    "symbol": "resolve_sigma_function",
    "signature": "resolve_sigma_function(cfg: Config) -> Optional[Callable[[float], float]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 219,
    "symbol": "resolve_phi_function",
    "signature": "resolve_phi_function(explicit_path: Optional[Path]) -> Tuple[Optional[Callable[[float], float]], str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 263,
    "symbol": "compute_a_blow",
    "signature": "compute_a_blow(qpr: float, rho: float, T_M: float, beta_thr: float) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 270,
    "symbol": "copy_sublimation_params",
    "signature": "copy_sublimation_params(template: SublimationParams) -> SublimationParams",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 274,
    "symbol": "evaluate_cell",
    "signature": "evaluate_cell(r_RM: float, T_M: float, ctx: RuntimeContext) -> BetaCellResult",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 442,
    "symbol": "build_heatmap",
    "signature": "build_heatmap(data: np.ndarray, r_values: np.ndarray, T_values: np.ndarray, beta_threshold: float, title: str, filepath: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 479,
    "symbol": "summarise_variation",
    "signature": "summarise_variation(matrix: np.ndarray, axis: int) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 490,
    "symbol": "write_readme",
    "signature": "write_readme(outdir: Path, ctx: RuntimeContext, config_path: Path, qpr_table_path: Path, phi_origin: str, beta_raw_map: np.ndarray, beta_eff_map: np.ndarray, r_values: np.ndarray, T_values: np.ndarray, dt_warning_cells: int, total_cells: int, qpr_counter: QPrCounter) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/diagnostics/beta_map.py",
    "line_no": 563,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 15,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[1]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 17,
    "symbol": "DEFAULT_DOC_PATHS",
    "signature": "DEFAULT_DOC_PATHS = ['analysis/equations.md', 'analysis/overview.md', 'analysis/run-recipes.md', 'analysis/sinks_callgraph.md', 'analysis/AI_USAGE.md', 'analysis/inventory.json', 'analysis/symbols.raw.txt', 'analysis/symbols.rg.txt']",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 28,
    "symbol": "RG_PATTERN",
    "signature": "RG_PATTERN = 'beta_at_smin|beta_threshold|s_min'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 29,
    "symbol": "SUMMARY_DEFAULT_PATHS",
    "signature": "SUMMARY_DEFAULT_PATHS = [REPO_ROOT / 'analysis' / 'outputs' / 'baseline_blowout_only' / 'summary.json', REPO_ROOT / 'analysis' / 'outputs' / 'summary.json']",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 35,
    "symbol": "REF_PATTERN",
    "signature": "REF_PATTERN = re.compile('(marsdisk/[A-Za-z0-9_/\\\\.-]+\\\\.py):(\\\\d+)(?:([–-])(\\\\d+))?')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 39,
    "symbol": "SKIP_DIR_NAMES",
    "signature": "SKIP_DIR_NAMES = {'.git', '.venv', 'venv', 'env', '__pycache__', '.mypy_cache', '.pytest_cache', '.idea', '.vscode', 'node_modules', 'build', 'dist'}",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 54,
    "symbol": "DOC_COLON_REF_PATTERN",
    "signature": "DOC_COLON_REF_PATTERN = re.compile('(marsdisk/[A-Za-z0-9_/\\\\.-]+\\\\.py):(\\\\d+)(?:[–—-](\\\\d+))?')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 57,
    "symbol": "DOC_INLINE_LINE_ANCHOR_PATTERN",
    "signature": "DOC_INLINE_LINE_ANCHOR_PATTERN = re.compile('\\\\s*[（(]\\\\s*#L(\\\\d+)(?:[–—-](\\\\d+))?\\\\s*[）)]', re.IGNORECASE)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 61,
    "symbol": "DOC_LINE_ANCHOR_PATTERN",
    "signature": "DOC_LINE_ANCHOR_PATTERN = re.compile('(marsdisk/[A-Za-z0-9_/\\\\.-]+\\\\.py)#L(\\\\d+)(?:[–—-](\\\\d+))?', re.IGNORECASE)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 65,
    "symbol": "DOC_SYMBOL_ANCHOR_PATTERN",
    "signature": "DOC_SYMBOL_ANCHOR_PATTERN = re.compile('(marsdisk/[A-Za-z0-9_/\\\\.-]+\\\\.py)#(?!L)([A-Za-z0-9_]+)')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 69,
    "symbol": "HEADING_IO_PATTERN",
    "signature": "HEADING_IO_PATTERN = re.compile('^## [^\\\\n]*I/O[^\\\\n]*$', re.MULTILINE)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 70,
    "symbol": "HEADING_RESPONSIBILITIES_PATTERN",
    "signature": "HEADING_RESPONSIBILITIES_PATTERN = re.compile('^## [^\\\\n]*責務[^\\\\n]*$', re.MULTILINE)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 72,
    "symbol": "SUGGESTIONS_DEFAULT_PATH",
    "signature": "SUGGESTIONS_DEFAULT_PATH = REPO_ROOT / 'analysis' / 'suggestions_index.json'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 73,
    "symbol": "EQUATIONS_PATH_DEFAULT",
    "signature": "EQUATIONS_PATH_DEFAULT = REPO_ROOT / 'analysis' / 'equations.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 74,
    "symbol": "OVERVIEW_PATH_DEFAULT",
    "signature": "OVERVIEW_PATH_DEFAULT = REPO_ROOT / 'analysis' / 'overview.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 75,
    "symbol": "RUN_RECIPES_PATH_DEFAULT",
    "signature": "RUN_RECIPES_PATH_DEFAULT = REPO_ROOT / 'analysis' / 'run-recipes.md'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 76,
    "symbol": "DEFAULT_DOCS_FOR_REFS",
    "signature": "DEFAULT_DOCS_FOR_REFS = [EQUATIONS_PATH_DEFAULT, OVERVIEW_PATH_DEFAULT, RUN_RECIPES_PATH_DEFAULT, REPO_ROOT / 'analysis' / 'sinks_callgraph.md', REPO_ROOT / 'analysis' / 'AI_USAGE.md', REPO_ROOT / 'analysis' / 'AGENT.md']",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 85,
    "symbol": "EQUATION_HEADING_PATTERN",
    "signature": "EQUATION_HEADING_PATTERN = re.compile('^### (?:\\\\((E\\\\.\\\\d{3})\\\\)\\\\s*)?(.*)$')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 86,
    "symbol": "LINE_ANCHOR_INLINE_PATTERN",
    "signature": "LINE_ANCHOR_INLINE_PATTERN = re.compile('[（(]#L\\\\d+(?:[–—-]L?\\\\d+)?[）)]')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 90,
    "symbol": "SymbolInfo",
    "signature": "class SymbolInfo",
    "brief_usage": "Container describing code symbols detected in the repository."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 104,
    "symbol": "FileChange",
    "signature": "class FileChange",
    "brief_usage": "Track a prospective file update."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 135,
    "symbol": "InventoryRecord",
    "signature": "class InventoryRecord",
    "brief_usage": "Normalized record describing a top-level symbol."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 171,
    "symbol": "DocSyncAgent",
    "signature": "class DocSyncAgent",
    "brief_usage": "Synchronise analysis documentation artefacts with repository sources."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 657,
    "symbol": "_legacy_main",
    "signature": "_legacy_main(argv: Optional[Sequence[str]]=None) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 726,
    "symbol": "_collect_inventory_records",
    "signature": "_collect_inventory_records(root: Path) -> List[InventoryRecord]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 766,
    "symbol": "_resolve_cli_path",
    "signature": "_resolve_cli_path(value: str) -> Path",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 773,
    "symbol": "_rel_to_repo",
    "signature": "_rel_to_repo(path: Path) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 780,
    "symbol": "_cmd_scan",
    "signature": "_cmd_scan(args: argparse.Namespace) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 796,
    "symbol": "_collect_doc_references",
    "signature": "_collect_doc_references(doc_paths: Sequence[Path]) -> Dict[str, Any]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 922,
    "symbol": "_cmd_refs",
    "signature": "_cmd_refs(args: argparse.Namespace) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 945,
    "symbol": "_load_inventory_records",
    "signature": "_load_inventory_records(path: Path) -> List[InventoryRecord]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 983,
    "symbol": "_match_symbol_by_span",
    "signature": "_match_symbol_by_span(symbols: Sequence[InventoryRecord], start: int, end: int) -> Optional[InventoryRecord]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 995,
    "symbol": "_compute_coverage",
    "signature": "_compute_coverage(inventory: Sequence[InventoryRecord], docs_payload: Dict[str, Any]) -> Dict[str, Any]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1142,
    "symbol": "_parse_gap_identifier",
    "signature": "_parse_gap_identifier(identifier: str) -> Optional[Tuple[str, str]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1154,
    "symbol": "_collect_unreferenced_from_coverage",
    "signature": "_collect_unreferenced_from_coverage(coverage_data: Dict[str, Any]) -> List[Tuple[str, str]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1179,
    "symbol": "_load_suggestions_index",
    "signature": "_load_suggestions_index(path: Path) -> Dict[Tuple[str, str], Dict[str, Any]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1202,
    "symbol": "_format_code_anchor",
    "signature": "_format_code_anchor(record: InventoryRecord) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1209,
    "symbol": "_strip_line_anchor_annotations",
    "signature": "_strip_line_anchor_annotations(text: str) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1213,
    "symbol": "ensure_equation_ids",
    "signature": "ensure_equation_ids(equations_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1273,
    "symbol": "_render_coverage_markdown",
    "signature": "_render_coverage_markdown(data: Dict[str, Any]) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1330,
    "symbol": "_is_stub_already_present",
    "signature": "_is_stub_already_present(text: str, record: InventoryRecord) -> bool",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1335,
    "symbol": "_render_stub_block",
    "signature": "_render_stub_block(record: InventoryRecord, doc_kind: str) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1367,
    "symbol": "_append_to_section",
    "signature": "_append_to_section(text: str, heading_pattern: re.Pattern[str], stub: str) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1382,
    "symbol": "_append_to_end",
    "signature": "_append_to_end(text: str, stub: str) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1388,
    "symbol": "_determine_autostub_target",
    "signature": "_determine_autostub_target(record: InventoryRecord, suggestions: Dict[Tuple[str, str], Dict[str, Any]], overview_path: Path, equations_path: Path, run_recipes_path: Path) -> Tuple[Path, Optional[re.Pattern[str]], str]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1435,
    "symbol": "_cmd_coverage",
    "signature": "_cmd_coverage(args: argparse.Namespace) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1468,
    "symbol": "_cmd_autostub",
    "signature": "_cmd_autostub(args: argparse.Namespace) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1544,
    "symbol": "_cmd_update",
    "signature": "_cmd_update(args: argparse.Namespace) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1675,
    "symbol": "_run_new_cli",
    "signature": "_run_new_cli(argv: Sequence[str]) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1889,
    "symbol": "main",
    "signature": "main(argv: Optional[Sequence[str]]=None) -> int",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/doc_sync_agent.py",
    "line_no": 1897,
    "symbol": "_git_commit",
    "signature": "_git_commit(changes: Iterable[FileChange]) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 12,
    "symbol": "PLANCK",
    "signature": "PLANCK = 6.62607015e-34",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 13,
    "symbol": "LIGHT_SPEED",
    "signature": "LIGHT_SPEED = 299792458.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 14,
    "symbol": "BOLTZMANN",
    "signature": "BOLTZMANN = 1.380649e-23",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 15,
    "symbol": "HC_OVER_K",
    "signature": "HC_OVER_K = PLANCK * LIGHT_SPEED / BOLTZMANN",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 17,
    "symbol": "WAVELENGTH_MIN_UM",
    "signature": "WAVELENGTH_MIN_UM = 0.5",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 18,
    "symbol": "WAVELENGTH_MAX_UM",
    "signature": "WAVELENGTH_MAX_UM = 30.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 19,
    "symbol": "DEFAULT_WAVELENGTH_SAMPLES",
    "signature": "DEFAULT_WAVELENGTH_SAMPLES = 512",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 22,
    "symbol": "_rayleigh_geometric_qpr",
    "signature": "_rayleigh_geometric_qpr(size_parameter: np.ndarray) -> np.ndarray",
    "brief_usage": "Rayleighと幾何光学をつなぐQ_pr曲線を計算する。Rayleigh–幾何 Q_pr."
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 28,
    "symbol": "_planck_lambda",
    "signature": "_planck_lambda(wavelength_m: np.ndarray, temperature: float) -> np.ndarray",
    "brief_usage": "黒体放射スペクトルの強度を計算する。Planck 分布B_λ."
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 40,
    "symbol": "compute_planck_mean_qpr",
    "signature": "compute_planck_mean_qpr(s_values: Sequence[float], temperatures: Sequence[float], wavelengths_um: Iterable[float] | None=None) -> np.ndarray",
    "brief_usage": "粒径と温度のグリッドでPlanck平均Q_prを計算する。Planck 平均⟨Q_pr⟩."
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 81,
    "symbol": "_parse_temperatures",
    "signature": "_parse_temperatures(raw: str) -> np.ndarray",
    "brief_usage": "カンマ区切り文字列から温度配列を作る。Planck 平均⟨Q_pr⟩."
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 95,
    "symbol": "_build_size_grid",
    "signature": "_build_size_grid(s_min: float, s_max: float, count: int) -> np.ndarray",
    "brief_usage": "粒径の対数グリッドを生成する。Planck 平均⟨Q_pr⟩."
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 106,
    "symbol": "_write_hdf5",
    "signature": "_write_hdf5(path: Path, qpr: np.ndarray, log10s: np.ndarray, temperatures: np.ndarray) -> None",
    "brief_usage": "Planck平均Q_prテーブルをHDF5に保存する。Planck 平均⟨Q_pr⟩."
  },
  {
    "file_path": "tools/make_qpr_table.py",
    "line_no": 120,
    "symbol": "main",
    "signature": "main(argv: Sequence[str] | None=None) -> None",
    "brief_usage": "コマンドライン引数でQ_prテーブルを生成する。Planck 平均⟨Q_pr⟩."
  },
  {
    "file_path": "tools/plotting.py",
    "line_no": 16,
    "symbol": "DEFAULT_DPI",
    "signature": "DEFAULT_DPI = 200",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/plotting.py",
    "line_no": 19,
    "symbol": "_temperature_edges",
    "signature": "_temperature_edges(temperatures: np.ndarray) -> np.ndarray",
    "brief_usage": "Construct temperature edges for pcolormesh."
  },
  {
    "file_path": "tools/plotting.py",
    "line_no": 34,
    "symbol": "save_heatmap_frames",
    "signature": "save_heatmap_frames(outdir: Path, times: Sequence[float], temperatures: np.ndarray, size_edges: np.ndarray, log_counts_cube: np.ndarray, s_min_eff_curve: np.ndarray, cmap: str='viridis', dpi: int=DEFAULT_DPI) -> list[Path]",
    "brief_usage": "Generate heatmap frames for each time snapshot."
  },
  {
    "file_path": "tools/plotting.py",
    "line_no": 109,
    "symbol": "save_keyframe_montage",
    "signature": "save_keyframe_montage(out_path: Path, times: Sequence[float], temperatures: np.ndarray, size_edges: np.ndarray, log_counts_cube: np.ndarray, s_min_eff_curve: np.ndarray, indices: Iterable[int] | None=None, cmap: str='viridis', dpi: int=DEFAULT_DPI) -> None",
    "brief_usage": "Render a montage of selected time frames."
  },
  {
    "file_path": "tools/plotting.py",
    "line_no": 170,
    "symbol": "save_gif",
    "signature": "save_gif(frame_paths: Sequence[Path], gif_path: Path, fps: int=8) -> None",
    "brief_usage": "Combine individual PNG frames into an animated GIF."
  },
  {
    "file_path": "tools/plotting/make_beta_movie.py",
    "line_no": 18,
    "symbol": "_read_zarr_array",
    "signature": "_read_zarr_array(path: Path) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_beta_movie.py",
    "line_no": 35,
    "symbol": "_load_map_spec",
    "signature": "_load_map_spec(path: Path) -> dict",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_beta_movie.py",
    "line_no": 47,
    "symbol": "_format_time_label",
    "signature": "_format_time_label(index: int, times: Sequence[float]) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_beta_movie.py",
    "line_no": 57,
    "symbol": "_render_frames",
    "signature": "_render_frames(beta_cube: np.ndarray, r_vals: Sequence[float], T_vals: Sequence[float], times: Sequence[float], outdir: Path, *, dt_ratio_median: float, qpr_table: str, vmax: float | None) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_beta_movie.py",
    "line_no": 120,
    "symbol": "_build_movie",
    "signature": "_build_movie(frames_dir: Path, movie_path: Path, fps: int, width: int) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_beta_movie.py",
    "line_no": 165,
    "symbol": "parse_args",
    "signature": "parse_args() -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_beta_movie.py",
    "line_no": 176,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 32,
    "symbol": "REPO_ROOT",
    "signature": "REPO_ROOT = Path(__file__).resolve().parents[2]",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 60,
    "symbol": "ensure_dir",
    "signature": "ensure_dir(path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 64,
    "symbol": "load_yaml",
    "signature": "load_yaml(path: Path) -> Mapping[str, object]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 70,
    "symbol": "resolve_config_for_run",
    "signature": "resolve_config_for_run(run_dir: Path, config_dir: Path) -> Path",
    "brief_usage": "Infer the configuration file associated with a run directory."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 99,
    "symbol": "read_csv",
    "signature": "read_csv(path: Path) -> pd.DataFrame",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 105,
    "symbol": "read_parquet",
    "signature": "read_parquet(path: Path) -> pd.DataFrame",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 114,
    "symbol": "select_axes",
    "signature": "select_axes(df: pd.DataFrame) -> Tuple[str, str]",
    "brief_usage": "Infer the x/y axes for the sweep heatmap."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 136,
    "symbol": "pick_metric",
    "signature": "pick_metric(df: pd.DataFrame) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 154,
    "symbol": "_success_mask",
    "signature": "_success_mask(df: pd.DataFrame) -> pd.Series",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 166,
    "symbol": "plot_regime_map",
    "signature": "plot_regime_map(csv_path: Path, out_path: Path, metric: Optional[str]=None) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 264,
    "symbol": "_SIZE_PATTERN",
    "signature": "_SIZE_PATTERN = re.compile('(?P<prefix>dSigma_dt_[A-Za-z]+|Sigma|mass|flux)[^0-9]*(?:bin_)?(?P<value>[0-9]+(?:\\\\.[0-9]+)?)(?P<unit>nm|um|µm|mm|cm|m)?$')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 271,
    "symbol": "_unit_scale",
    "signature": "_unit_scale(unit: Optional[str]) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 285,
    "symbol": "_extract_size_columns",
    "signature": "_extract_size_columns(columns: Iterable[str]) -> List[Tuple[str, str, float]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 299,
    "symbol": "PSDInfo",
    "signature": "class PSDInfo",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 305,
    "symbol": "_load_psd_from_config",
    "signature": "_load_psd_from_config(config_path: Path, s_min_dynamic: float, rho: float) -> PSDInfo",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 333,
    "symbol": "_compute_mass_fractions",
    "signature": "_compute_mass_fractions(psd_info: PSDInfo, rho: float) -> Tuple[np.ndarray, np.ndarray]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 345,
    "symbol": "_size_contribution_lines",
    "signature": "_size_contribution_lines(df_series: pd.DataFrame, config_path: Path, label: str, summary_path: Path) -> Tuple[np.ndarray, Dict[str, np.ndarray], Dict[str, float]]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 404,
    "symbol": "plot_contrib_by_size",
    "signature": "plot_contrib_by_size(run_dir: Path, config_path: Path, out_path: Path, summary_path: Path, caption_note: Optional[str]=None) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 467,
    "symbol": "_merge_mass_budget",
    "signature": "_merge_mass_budget(run_dir: Path) -> pd.DataFrame",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 480,
    "symbol": "plot_mass_budget",
    "signature": "plot_mass_budget(run_dir: Path, out_path: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 512,
    "symbol": "parse_args",
    "signature": "parse_args(argv: Optional[Sequence[str]]=None) -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_figs.py",
    "line_no": 549,
    "symbol": "main",
    "signature": "main(argv: Optional[Sequence[str]]=None) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_massloss_map.py",
    "line_no": 15,
    "symbol": "parse_args",
    "signature": "parse_args() -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_massloss_map.py",
    "line_no": 49,
    "symbol": "_build_grid",
    "signature": "_build_grid(df: pd.DataFrame, column: str, r_vals: np.ndarray, T_vals: np.ndarray) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/make_massloss_map.py",
    "line_no": 63,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/plot_mass_loss_map.py",
    "line_no": 15,
    "symbol": "DEFAULT_CONTOURS",
    "signature": "DEFAULT_CONTOURS = (0.1, 0.3, 0.5)",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/plotting/plot_mass_loss_map.py",
    "line_no": 16,
    "symbol": "DEFAULT_CMAP",
    "signature": "DEFAULT_CMAP = 'magma'",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/plotting/plot_mass_loss_map.py",
    "line_no": 19,
    "symbol": "_parse_contours",
    "signature": "_parse_contours(values: Sequence[float]) -> Sequence[float]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/plot_mass_loss_map.py",
    "line_no": 24,
    "symbol": "_build_grid",
    "signature": "_build_grid(df: pd.DataFrame, column: str, r_values: np.ndarray, T_values: np.ndarray) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/plot_mass_loss_map.py",
    "line_no": 43,
    "symbol": "parse_args",
    "signature": "parse_args() -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/plot_mass_loss_map.py",
    "line_no": 93,
    "symbol": "_make_annotation",
    "signature": "_make_annotation(df: pd.DataFrame, contour_levels: Iterable[float]) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/plotting/plot_mass_loss_map.py",
    "line_no": 111,
    "symbol": "main",
    "signature": "main() -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 35,
    "symbol": "_bool_or_none",
    "signature": "_bool_or_none(value: str | None) -> bool | None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 46,
    "symbol": "parse_args",
    "signature": "parse_args(argv: List[str]) -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 103,
    "symbol": "DEFAULTS",
    "signature": "DEFAULTS: Dict[str, object] = {'outdir': 'simulation_results/psd_T_time_map', 'smin': 1e-07, 'smax': 0.1, 'nbins': 120, 'alpha': 3.5, 'rho_p': 3000.0, 'TM_ref': 3000.0, 'r_RM': 1.5, 'chi_blow': 1.0, 't_orbits': 1.0, 'n_steps': 100, 'dt_policy': 'auto', 'cfl_max': 0.2, 'Tmin': 2000.0, 'Tmax': 6000.0, 'dT': 100.0, 'nT': None, 'save_gif': True, 'k0': 1e-12, 'T0': 2500.0, 'dT_sub': 200.0, 'size_exp': 0.0, 'normalise_total_number': 1.0, 'normalise_total_mass': None, 'inherit_previous_config': False, 'log_level': 'INFO'}",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 132,
    "symbol": "PREVIOUS_CONFIG_PATH",
    "signature": "PREVIOUS_CONFIG_PATH = Path('simulation_results/psd_time_evolution/config_used.json')",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 135,
    "symbol": "_load_previous_config",
    "signature": "_load_previous_config() -> Dict[str, object]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 150,
    "symbol": "resolve_config",
    "signature": "resolve_config(args: argparse.Namespace) -> Dict[str, object]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 193,
    "symbol": "configure_logging",
    "signature": "configure_logging(outdir: Path, level: str) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 215,
    "symbol": "prepare_temperatures",
    "signature": "prepare_temperatures(config: Dict[str, object]) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 235,
    "symbol": "compute_s_min_eff",
    "signature": "compute_s_min_eff(temperature: float, config: Dict[str, object], qpr_grid) -> tuple[float, float]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 249,
    "symbol": "integrate_all_temperatures",
    "signature": "integrate_all_temperatures(temperatures: np.ndarray, config: Dict[str, object], qpr_grid, size_centres: np.ndarray, size_edges: np.ndarray, sample_times: np.ndarray) -> tuple[List[TemperatureResult], np.ndarray, np.ndarray]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 316,
    "symbol": "build_output_cube",
    "signature": "build_output_cube(results: List[TemperatureResult], sample_times: np.ndarray) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 328,
    "symbol": "make_metrics_dict",
    "signature": "make_metrics_dict(config: Dict[str, object], temperatures: np.ndarray, sample_times: np.ndarray, results: List[TemperatureResult], a_blow: np.ndarray, s_min_eff: np.ndarray) -> Dict[str, object]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 386,
    "symbol": "save_config",
    "signature": "save_config(config: Dict[str, object], outdir: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 391,
    "symbol": "save_metrics",
    "signature": "save_metrics(metrics: Dict[str, object], outdir: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 396,
    "symbol": "save_timeseries_parquet",
    "signature": "save_timeseries_parquet(outdir: Path, sample_times: np.ndarray, temperatures: np.ndarray, size_centres: np.ndarray, cube: np.ndarray) -> Path",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 421,
    "symbol": "validate_outputs",
    "signature": "validate_outputs(frame_paths: Iterable[Path], artifacts: Iterable[Path]) -> Dict[str, bool]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 433,
    "symbol": "check_monotonicity",
    "signature": "check_monotonicity(cube: np.ndarray, tolerance: float=1e-09) -> Dict[str, object]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 445,
    "symbol": "compute_trend",
    "signature": "compute_trend(values: np.ndarray) -> str",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 458,
    "symbol": "print_summary",
    "signature": "print_summary(outdir: Path, temperatures: np.ndarray, a_blow: np.ndarray, s_min_eff: np.ndarray, results: List[TemperatureResult], metrics: Dict[str, object], parquet_path: Path, frame_paths: List[Path], gif_path: Path | None) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_T_time_map.py",
    "line_no": 507,
    "symbol": "main",
    "signature": "main(argv: List[str]) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 26,
    "symbol": "G_NEWTON",
    "signature": "G_NEWTON = 6.6743e-11",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 27,
    "symbol": "M_MARS",
    "signature": "M_MARS = 6.4171e+23",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 28,
    "symbol": "R_MARS",
    "signature": "R_MARS = 3389500.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 29,
    "symbol": "L_SUN",
    "signature": "L_SUN = 3.828e+26",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 30,
    "symbol": "C_LIGHT",
    "signature": "C_LIGHT = 299792458.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 32,
    "symbol": "EPSILON",
    "signature": "EPSILON = 1e-30",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 36,
    "symbol": "QprGrid",
    "signature": "class QprGrid",
    "brief_usage": "Container for Q_pr interpolation metadata."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 45,
    "symbol": "TemperatureResult",
    "signature": "class TemperatureResult",
    "brief_usage": "Simulation outcome for a single temperature."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 66,
    "symbol": "_normalise_columns",
    "signature": "_normalise_columns(df: pd.DataFrame) -> Dict[str, str]",
    "brief_usage": "Build mapping from expected semantic name to column."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 86,
    "symbol": "load_qpr_table",
    "signature": "load_qpr_table(path: Path) -> QprGrid",
    "brief_usage": "Load Q_pr data and build a 2D interpolator (temperature, size)."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 121,
    "symbol": "orbital_period_seconds",
    "signature": "orbital_period_seconds(radius_m: float) -> float",
    "brief_usage": "Keplerian orbital period at given radius."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 127,
    "symbol": "build_size_grid",
    "signature": "build_size_grid(s_min: float, s_max: float, nbins: int) -> Tuple[np.ndarray, np.ndarray]",
    "brief_usage": "Construct logarithmic size grid (centres + edges)."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 145,
    "symbol": "initialise_psd_power_law",
    "signature": "initialise_psd_power_law(centres: np.ndarray, edges: np.ndarray, alpha: float, normalise_number: float=1.0, rho: float | None=None, normalise_mass: float | None=None) -> np.ndarray",
    "brief_usage": "Initialise PSD counts following N ∝ s^-alpha, normalised by number or mass."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 173,
    "symbol": "compute_beta",
    "signature": "compute_beta(sizes: np.ndarray, qpr_grid: QprGrid, temperature: float, rho: float) -> np.ndarray",
    "brief_usage": "Compute radiation pressure ratio β(s, T)."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 187,
    "symbol": "find_blowout_size",
    "signature": "find_blowout_size(s_min_cfg: float, s_max_cfg: float, qpr_grid: QprGrid, temperature: float, rho: float, chi_blow: float, samples: int=4000) -> float",
    "brief_usage": "Locate blow-out size where β reaches threshold."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 209,
    "symbol": "compute_dsdt",
    "signature": "compute_dsdt(sizes: np.ndarray, temperature: float, k0: float, T0: float, delta_T: float) -> np.ndarray",
    "brief_usage": "Sublimation-driven size change rate ds/dt (negative)."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 222,
    "symbol": "compute_dsdt_with_size_exp",
    "signature": "compute_dsdt_with_size_exp(sizes: np.ndarray, temperature: float, k0: float, T0: float, delta_T: float, size_exp: float) -> np.ndarray",
    "brief_usage": "General sublimation ds/dt with optional power-law size dependence."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 240,
    "symbol": "_compute_cfl_dt",
    "signature": "_compute_cfl_dt(widths: np.ndarray, dsdt_centres: np.ndarray, cfl_max: float) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 435,
    "symbol": "_integrate_temperature_psd_python",
    "signature": "_integrate_temperature_psd_python(counts0: np.ndarray, widths: np.ndarray, dsdt_centres: np.ndarray, dsdt_edges: np.ndarray, s_min_eff: float, rho: float, sample_times: np.ndarray, mass_per_bin: np.ndarray, dt_cfl: float, dt_policy_flag: int)",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_core.py",
    "line_no": 565,
    "symbol": "integrate_temperature_psd",
    "signature": "integrate_temperature_psd(temperature: float, global_centres: np.ndarray, global_edges: np.ndarray, s_min_eff: float, initial_power_law_alpha: float, rho: float, total_number_norm: float, total_mass_norm: float | None, sample_times: np.ndarray, dsdt_centre_fn, dsdt_edge_fn, cfl_max: float, dt_policy: str) -> TemperatureResult",
    "brief_usage": "Integrate PSD for a single temperature across requested sample times."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 50,
    "symbol": "G_NEWTON",
    "signature": "G_NEWTON = 6.6743e-11",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 51,
    "symbol": "M_MARS",
    "signature": "M_MARS = 6.4171e+23",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 52,
    "symbol": "R_MARS",
    "signature": "R_MARS = 3389500.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 53,
    "symbol": "L_SUN",
    "signature": "L_SUN = 3.828e+26",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 54,
    "symbol": "C_LIGHT",
    "signature": "C_LIGHT = 299792458.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 57,
    "symbol": "SUB_K0_DEFAULT",
    "signature": "SUB_K0_DEFAULT = 5e-11",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 58,
    "symbol": "SUB_T0_DEFAULT",
    "signature": "SUB_T0_DEFAULT = 2500.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 59,
    "symbol": "SUB_DELTA_T_DEFAULT",
    "signature": "SUB_DELTA_T_DEFAULT = 150.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 60,
    "symbol": "SUB_SIZE_EXP_DEFAULT",
    "signature": "SUB_SIZE_EXP_DEFAULT = 0.0",
    "brief_usage": "Module constant"
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 63,
    "symbol": "parse_args",
    "signature": "parse_args(argv: List[str]) -> argparse.Namespace",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 145,
    "symbol": "configure_logging",
    "signature": "configure_logging(outdir: Path, level: str) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 164,
    "symbol": "load_qpr_interpolator",
    "signature": "load_qpr_interpolator(qpr_path: Path) -> RegularGridInterpolator",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 198,
    "symbol": "compute_beta",
    "signature": "compute_beta(sizes: np.ndarray, qpr_interp: RegularGridInterpolator, temperature: float, rho: float) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 213,
    "symbol": "find_blowout_size",
    "signature": "find_blowout_size(s_min_cfg: float, s_max_cfg: float, qpr_interp: RegularGridInterpolator, temperature: float, rho: float, chi_blow: float) -> float",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 233,
    "symbol": "build_size_grid",
    "signature": "build_size_grid(s_min_eff: float, s_max: float, nbins: int) -> Tuple[np.ndarray, np.ndarray]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 244,
    "symbol": "initialise_psd",
    "signature": "initialise_psd(centers: np.ndarray, edges: np.ndarray, alpha: float, normalise_number: float | None, normalise_mass: float | None, rho: float) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 265,
    "symbol": "compute_sublimation_rate",
    "signature": "compute_sublimation_rate(sizes: np.ndarray, temperature: float, k0: float, T0: float, delta_T: float, size_exp: float) -> np.ndarray",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 283,
    "symbol": "StepRecord",
    "signature": "class StepRecord",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 296,
    "symbol": "SimulationResult",
    "signature": "class SimulationResult",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 306,
    "symbol": "integrate_psd",
    "signature": "integrate_psd(centers: np.ndarray, edges: np.ndarray, initial_counts: np.ndarray, dsdt_centers: np.ndarray, rho: float, total_time: float, n_steps_nominal: int, dt_policy: str, cfl_max: float, s_min_effective: float, qpr_info: Dict[str, float], torb: float) -> SimulationResult",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 433,
    "symbol": "build_outputs",
    "signature": "build_outputs(result: SimulationResult, centers: np.ndarray, outdir: Path, rho: float) -> Dict[str, float]",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 490,
    "symbol": "plot_psd_curves",
    "signature": "plot_psd_curves(result: SimulationResult, centers: np.ndarray, outdir: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 517,
    "symbol": "plot_psd_heatmap",
    "signature": "plot_psd_heatmap(result: SimulationResult, centers: np.ndarray, outdir: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 550,
    "symbol": "save_gif_animation",
    "signature": "save_gif_animation(result: SimulationResult, centers: np.ndarray, outdir: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 576,
    "symbol": "save_config",
    "signature": "save_config(config: Dict[str, object], outdir: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 581,
    "symbol": "summarise_to_stdout",
    "signature": "summarise_to_stdout(metrics: Dict[str, float], gif_saved: bool, outdir: Path) -> None",
    "brief_usage": "No description available."
  },
  {
    "file_path": "tools/psd_time_evolution.py",
    "line_no": 597,
    "symbol": "main",
    "signature": "main(argv: List[str]) -> None",
    "brief_usage": "No description available."
  }
]
