"""Plot M_loss versus radius for the AXIS_r_sweep results."""
from __future__ import annotations

import argparse
from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Plot M_loss(M_Mars) versus radius from AXIS_r_sweep/summary.csv."
    )
    parser.add_argument(
        "--summary",
        type=Path,
        default=Path("analysis/agent_runs/AXIS_r_sweep/summary.csv"),
        help="Path to the summary.csv file generated by the sweep.",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=Path("analysis/agent_runs/AXIS_r_sweep/figures/M_loss_vs_radius.png"),
        help="Destination for the generated plot.",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    if not args.summary.exists():
        raise FileNotFoundError(f"Summary CSV not found: {args.summary}")
    df = pd.read_csv(args.summary)

    required = {"r_RM", "M_loss_MMars", "T_M_K"}
    missing = sorted(required.difference(df.columns))
    if missing:
        raise ValueError(f"summary.csv is missing required columns: {', '.join(missing)}")

    work = df.copy()
    for column in ("r_RM", "M_loss_MMars", "T_M_K"):
        work[column] = pd.to_numeric(work[column], errors="coerce")
    work = work.dropna(subset=["r_RM", "M_loss_MMars", "T_M_K"])

    unique_temperatures = sorted(work["T_M_K"].unique())
    if not unique_temperatures:
        raise ValueError("No temperature entries found in summary.csv")

    cmap = plt.get_cmap("viridis")
    fig, ax = plt.subplots(figsize=(7.0, 4.5))

    for idx, temp in enumerate(unique_temperatures):
        temp_subset = work[work["T_M_K"] == temp].sort_values("r_RM")
        if temp_subset.empty:
            continue
        color = cmap(idx / max(len(unique_temperatures) - 1, 1))
        ax.plot(
            temp_subset["r_RM"],
            temp_subset["M_loss_MMars"],
            marker="o",
            linewidth=1.5,
            markersize=3.0,
            color=color,
            label=f"T_M={temp:.0f} K",
        )

    ax.set_xlabel("Orbital radius r / R_M")
    ax.set_ylabel("M_loss (M_Mars)")
    ax.set_title("AXIS_r_sweep: Mass loss vs. orbital radius")
    ax.set_yscale("log")
    ax.grid(True, which="both", linestyle="--", linewidth=0.5, alpha=0.3)
    ax.legend(title="Surface temperature", ncol=2, fontsize="small")

    output_path: Path = args.output
    output_path.parent.mkdir(parents=True, exist_ok=True)
    fig.tight_layout()
    fig.savefig(output_path, dpi=150)
    plt.close(fig)

    print(f"Saved plot to {output_path}")


if __name__ == "__main__":
    main()

